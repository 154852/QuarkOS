add    0x31bad(%eax),%dh
add    %al,(%eax)
sti    
dec    %edi
push   %edx
in     $0x66,%al
nop
xchg   %ax,%ax
mov    $0x109018,%eax
cmp    $0x109018,%eax
je     100040 <deregister_tm_clones+0x30>
mov    $0x0,%eax
test   %eax,%eax
je     100040 <deregister_tm_clones+0x30>
push   %ebp
mov    %esp,%ebp
sub    $0x14,%esp
push   $0x109018
call   *%eax
add    $0x10,%esp
leave  
ret    
lea    0x0(%esi,%eiz,1),%esi
xchg   %ax,%ax
ret    
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
nop
mov    $0x109018,%eax
sub    $0x109018,%eax
mov    %eax,%edx
shr    $0x1f,%eax
sar    $0x2,%edx
add    %edx,%eax
sar    %eax
je     100090 <register_tm_clones+0x40>
mov    $0x0,%edx
test   %edx,%edx
je     100090 <register_tm_clones+0x40>
push   %ebp
mov    %esp,%ebp
sub    $0x10,%esp
push   %eax
push   $0x109018
call   *%edx
add    $0x10,%esp
leave  
ret    
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
nop
ret    
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
nop
cmpb   $0x0,0x10a000
jne    100110 <__do_global_dtors_aux+0x70>
push   %ebp
mov    0x10a004,%eax
mov    %esp,%ebp
push   %esi
mov    $0x109010,%esi
push   %ebx
mov    $0x109014,%ebx
sub    $0x109010,%ebx
sar    $0x2,%ebx
sub    $0x1,%ebx
cmp    %ebx,%eax
jae    1000e4 <__do_global_dtors_aux+0x44>
lea    0x0(%esi),%esi
add    $0x1,%eax
mov    %eax,0x10a004
call   *(%esi,%eax,4)
mov    0x10a004,%eax
cmp    %ebx,%eax
jb     1000d0 <__do_global_dtors_aux+0x30>
call   100010 <deregister_tm_clones>
mov    $0x0,%eax
test   %eax,%eax
je     100102 <__do_global_dtors_aux+0x62>
sub    $0xc,%esp
push   $0x106970
call   0 <ALIGN-0x1>
add    $0x10,%esp
movb   $0x1,0x10a000
lea    -0x8(%ebp),%esp
pop    %ebx
pop    %esi
pop    %ebp
ret    
ret    
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
nop
mov    $0x0,%eax
test   %eax,%eax
je     100150 <frame_dummy+0x30>
push   %ebp
mov    %esp,%ebp
sub    $0x10,%esp
push   $0x10a008
push   $0x106970
call   0 <ALIGN-0x1>
add    $0x10,%esp
leave  
jmp    100050 <register_tm_clones>
lea    0x0(%esi,%eiz,1),%esi
xchg   %ax,%ax
jmp    100050 <register_tm_clones>
mov    $0x10e020,%esp
call   105a11 <_init>
call   1010b0 <kernel_main>
cli    
hlt    
jmp    100165 <_start+0x10>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
mov    %esp,%ebp
push   %ebx
mov    0x8(%ebp),%edx
mov    0xc(%ebp),%ecx
mov    0x10(%ebp),%eax
mov    %cx,0x10e042(,%edx,8)
mov    %ecx,%ebx
shr    $0x18,%ecx
mov    %cl,0x10e047(,%edx,8)
movzbl 0x18(%ebp),%ecx
shr    $0x10,%ebx
mov    %ax,0x10e040(,%edx,8)
shr    $0x10,%eax
and    $0xf,%eax
and    $0xfffffff0,%ecx
mov    %bl,0x10e044(,%edx,8)
mov    -0x4(%ebp),%ebx
or     %ecx,%eax
mov    %al,0x10e046(,%edx,8)
mov    0x14(%ebp),%eax
mov    %al,0x10e045(,%edx,8)
leave  
ret    
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
mov    %esp,%ebp
push   %ecx
push   %edx
push   %eax
and    $0xfffffff0,%esp
sub    $0x18,%esp
push   $0x1078f8
push   $0x103bc0
cld    
call   105410 <printf_>
add    $0x10,%esp
jmp    1001ef <_ZN3IRQ17interrupt_handlerEPNS_13CSITRegistersE+0x1f>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
nop
push   %ebp
xor    %edx,%edx
mov    $0x1001d0,%ecx
mov    %esp,%ebp
push   %ebx
mov    0x8(%ebp),%ebx
xchg   %ax,%ax
mov    (%ebx,%edx,4),%eax
movl   $0xee000008,0x10e0a2(,%edx,8)
test   %eax,%eax
cmove  %ecx,%eax
mov    %ax,0x10e0a0(,%edx,8)
shr    $0x10,%eax
mov    %ax,0x10e0a6(,%edx,8)
add    $0x1,%edx
cmp    $0x100,%edx
jne    100210 <_ZN3IRQ21interrupts_initialiseEPPFvPNS_13CSITRegistersEE+0x10>
movl   $0x10e0a0,0x10e082
mov    $0x7ff,%eax
mov    %ax,0x10e080
lidtl  0x10e080
mov    -0x4(%ebp),%ebx
leave  
ret    
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %eax
push   %ebx
push   %ecx
push   %edx
push   %esi
push   %edi
push   %ebp
mov    %ds,%ax
push   %eax
mov    $0x10,%ax
mov    %eax,%ds
mov    %eax,%es
mov    %eax,%fs
mov    %eax,%gs
push   %esp
call   100c40 <syscall_handle>
pop    %esp
pop    %ebx
mov    %ebx,%ds
mov    %ebx,%es
mov    %ebx,%fs
mov    %ebx,%gs
pop    %ebp
pop    %edi
pop    %esi
pop    %edx
pop    %ecx
pop    %ebx
pop    %eax
iret   
popl   0x100270
push   %eax
push   %ebx
push   %ecx
push   %edx
push   %esi
push   %edi
push   %ebp
call   100e90 <page_fault_handle>
pop    %ebp
pop    %edi
pop    %esi
pop    %edx
pop    %ecx
pop    %ebx
pop    %eax
mov    $0x23,%ax
mov    %eax,%ds
mov    %eax,%es
mov    %eax,%fs
mov    %eax,%gs
iret   
popl   0x100270
push   %eax
push   %ebx
push   %ecx
push   %edx
push   %esi
push   %edi
push   %ebp
call   100f20 <bounds_check_handle>
pop    %ebp
pop    %edi
pop    %esi
pop    %edx
pop    %ecx
pop    %ebx
pop    %eax
mov    $0x23,%ax
mov    %eax,%ds
mov    %eax,%es
mov    %eax,%fs
mov    %eax,%gs
iret   
popl   0x100270
push   %eax
push   %ebx
push   %ecx
push   %edx
push   %esi
push   %edi
push   %ebp
call   100fb0 <general_protection_fault_handle>
pop    %ebp
pop    %edi
pop    %esi
pop    %edx
pop    %ecx
pop    %ebx
pop    %eax
mov    $0x23,%ax
mov    %eax,%ds
mov    %eax,%es
mov    %eax,%fs
mov    %eax,%gs
iret   
popl   0x100270
push   %eax
push   %ebx
push   %ecx
push   %edx
push   %esi
push   %edi
push   %ebp
call   101040 <double_fault_handle>
pop    %ebp
pop    %edi
pop    %esi
pop    %edx
pop    %ecx
pop    %ebx
pop    %eax
mov    $0x23,%ax
mov    %eax,%ds
mov    %eax,%es
mov    %eax,%fs
mov    %eax,%gs
iret   
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
push   %ecx
push   %edx
push   %eax
and    $0xfffffff0,%esp
sub    $0x30,%esp
cld    
call   101d20 <_ZN4CMOS10read_yearsEv>
mov    %eax,%edi
call   101c90 <_ZN4CMOS10read_monthEv>
mov    %eax,%esi
call   101c00 <_ZN4CMOS17read_day_of_monthEv>
mov    %eax,0x2c(%esp)
call   101a10 <_ZN4CMOS12read_secondsEv>
mov    %eax,0x28(%esp)
call   101aa0 <_ZN4CMOS12read_minutesEv>
mov    %eax,%ebx
call   101b30 <_ZN4CMOS10read_hoursEv>
push   %edi
push   %esi
pushl  0x34(%esp)
pushl  0x34(%esp)
push   %ebx
push   %eax
push   $0x107cdc
push   $0x103bc0
call   105410 <printf_>
add    $0x18,%esp
push   $0x107903
push   $0x103bc0
call   105410 <printf_>
add    $0x10,%esp
jmp    1003ac <_Z14division_errorP15interrupt_framem+0x6c>
xchg   %ax,%ax
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
push   %ecx
push   %edx
push   %eax
and    $0xfffffff0,%esp
sub    $0x30,%esp
cld    
call   101d20 <_ZN4CMOS10read_yearsEv>
mov    %eax,%edi
call   101c90 <_ZN4CMOS10read_monthEv>
mov    %eax,%esi
call   101c00 <_ZN4CMOS17read_day_of_monthEv>
mov    %eax,0x2c(%esp)
call   101a10 <_ZN4CMOS12read_secondsEv>
mov    %eax,0x28(%esp)
call   101aa0 <_ZN4CMOS12read_minutesEv>
mov    %eax,%ebx
call   101b30 <_ZN4CMOS10read_hoursEv>
push   %edi
push   %esi
pushl  0x34(%esp)
pushl  0x34(%esp)
push   %ebx
push   %eax
push   $0x107cdc
push   $0x103bc0
call   105410 <printf_>
add    $0x18,%esp
push   $0x107913
push   $0x103bc0
call   105410 <printf_>
add    $0x10,%esp
jmp    10041c <_Z15debug_exceptionP15interrupt_framem+0x6c>
xchg   %ax,%ax
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
push   %ecx
push   %edx
push   %eax
and    $0xfffffff0,%esp
sub    $0x30,%esp
cld    
call   101d20 <_ZN4CMOS10read_yearsEv>
mov    %eax,%edi
call   101c90 <_ZN4CMOS10read_monthEv>
mov    %eax,%esi
call   101c00 <_ZN4CMOS17read_day_of_monthEv>
mov    %eax,0x2c(%esp)
call   101a10 <_ZN4CMOS12read_secondsEv>
mov    %eax,0x28(%esp)
call   101aa0 <_ZN4CMOS12read_minutesEv>
mov    %eax,%ebx
call   101b30 <_ZN4CMOS10read_hoursEv>
push   %edi
push   %esi
pushl  0x34(%esp)
pushl  0x34(%esp)
push   %ebx
push   %eax
push   $0x107cdc
push   $0x103bc0
call   105410 <printf_>
add    $0x18,%esp
push   $0x107924
push   $0x103bc0
call   105410 <printf_>
add    $0x10,%esp
jmp    10048c <_Z13unknown_errorP15interrupt_framem+0x6c>
xchg   %ax,%ax
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
push   %ecx
push   %edx
push   %eax
and    $0xfffffff0,%esp
sub    $0x30,%esp
cld    
call   101d20 <_ZN4CMOS10read_yearsEv>
mov    %eax,%edi
call   101c90 <_ZN4CMOS10read_monthEv>
mov    %eax,%esi
call   101c00 <_ZN4CMOS17read_day_of_monthEv>
mov    %eax,0x2c(%esp)
call   101a10 <_ZN4CMOS12read_secondsEv>
mov    %eax,0x28(%esp)
call   101aa0 <_ZN4CMOS12read_minutesEv>
mov    %eax,%ebx
call   101b30 <_ZN4CMOS10read_hoursEv>
push   %edi
push   %esi
pushl  0x34(%esp)
pushl  0x34(%esp)
push   %ebx
push   %eax
push   $0x107cdc
push   $0x103bc0
call   105410 <printf_>
add    $0x18,%esp
push   $0x107933
push   $0x103bc0
call   105410 <printf_>
add    $0x10,%esp
jmp    1004fc <_Z10breakpointP15interrupt_framem+0x6c>
xchg   %ax,%ax
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
push   %ecx
push   %edx
push   %eax
and    $0xfffffff0,%esp
sub    $0x30,%esp
cld    
call   101d20 <_ZN4CMOS10read_yearsEv>
mov    %eax,%edi
call   101c90 <_ZN4CMOS10read_monthEv>
mov    %eax,%esi
call   101c00 <_ZN4CMOS17read_day_of_monthEv>
mov    %eax,0x2c(%esp)
call   101a10 <_ZN4CMOS12read_secondsEv>
mov    %eax,0x28(%esp)
call   101aa0 <_ZN4CMOS12read_minutesEv>
mov    %eax,%ebx
call   101b30 <_ZN4CMOS10read_hoursEv>
push   %edi
push   %esi
pushl  0x34(%esp)
pushl  0x34(%esp)
push   %ebx
push   %eax
push   $0x107cdc
push   $0x103bc0
call   105410 <printf_>
add    $0x18,%esp
push   $0x10793f
push   $0x103bc0
call   105410 <printf_>
add    $0x10,%esp
jmp    10056c <_Z8overflowP15interrupt_framem+0x6c>
xchg   %ax,%ax
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
push   %ecx
push   %edx
push   %eax
and    $0xfffffff0,%esp
sub    $0x30,%esp
cld    
call   101d20 <_ZN4CMOS10read_yearsEv>
mov    %eax,%edi
call   101c90 <_ZN4CMOS10read_monthEv>
mov    %eax,%esi
call   101c00 <_ZN4CMOS17read_day_of_monthEv>
mov    %eax,0x2c(%esp)
call   101a10 <_ZN4CMOS12read_secondsEv>
mov    %eax,0x28(%esp)
call   101aa0 <_ZN4CMOS12read_minutesEv>
mov    %eax,%ebx
call   101b30 <_ZN4CMOS10read_hoursEv>
push   %edi
push   %esi
pushl  0x34(%esp)
pushl  0x34(%esp)
push   %ebx
push   %eax
push   $0x107cdc
push   $0x103bc0
call   105410 <printf_>
add    $0x18,%esp
push   $0x107949
push   $0x103bc0
call   105410 <printf_>
add    $0x10,%esp
jmp    1005dc <_Z14invalid_opcodeP15interrupt_framem+0x6c>
xchg   %ax,%ax
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
push   %ecx
push   %edx
push   %eax
and    $0xfffffff0,%esp
sub    $0x30,%esp
cld    
call   101d20 <_ZN4CMOS10read_yearsEv>
mov    %eax,%edi
call   101c90 <_ZN4CMOS10read_monthEv>
mov    %eax,%esi
call   101c00 <_ZN4CMOS17read_day_of_monthEv>
mov    %eax,0x2c(%esp)
call   101a10 <_ZN4CMOS12read_secondsEv>
mov    %eax,0x28(%esp)
call   101aa0 <_ZN4CMOS12read_minutesEv>
mov    %eax,%ebx
call   101b30 <_ZN4CMOS10read_hoursEv>
push   %edi
push   %esi
pushl  0x34(%esp)
pushl  0x34(%esp)
push   %ebx
push   %eax
push   $0x107cdc
push   $0x103bc0
call   105410 <printf_>
add    $0x18,%esp
push   $0x107959
push   $0x103bc0
call   105410 <printf_>
add    $0x10,%esp
jmp    10064c <_Z23coprocess_not_availableP15interrupt_framem+0x6c>
xchg   %ax,%ax
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
push   %ecx
push   %edx
push   %eax
and    $0xfffffff0,%esp
sub    $0x30,%esp
cld    
call   101d20 <_ZN4CMOS10read_yearsEv>
mov    %eax,%edi
call   101c90 <_ZN4CMOS10read_monthEv>
mov    %eax,%esi
call   101c00 <_ZN4CMOS17read_day_of_monthEv>
mov    %eax,0x2c(%esp)
call   101a10 <_ZN4CMOS12read_secondsEv>
mov    %eax,0x28(%esp)
call   101aa0 <_ZN4CMOS12read_minutesEv>
mov    %eax,%ebx
call   101b30 <_ZN4CMOS10read_hoursEv>
push   %edi
push   %esi
pushl  0x34(%esp)
pushl  0x34(%esp)
push   %ebx
push   %eax
push   $0x107cdc
push   $0x103bc0
call   105410 <printf_>
add    $0x18,%esp
push   $0x107972
push   $0x103bc0
call   105410 <printf_>
add    $0x10,%esp
jmp    1006bc <_Z27coprocessor_segment_overrunP15interrupt_framem+0x6c>
xchg   %ax,%ax
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
push   %ecx
push   %edx
push   %eax
and    $0xfffffff0,%esp
sub    $0x30,%esp
cld    
call   101d20 <_ZN4CMOS10read_yearsEv>
mov    %eax,%edi
call   101c90 <_ZN4CMOS10read_monthEv>
mov    %eax,%esi
call   101c00 <_ZN4CMOS17read_day_of_monthEv>
mov    %eax,0x2c(%esp)
call   101a10 <_ZN4CMOS12read_secondsEv>
mov    %eax,0x28(%esp)
call   101aa0 <_ZN4CMOS12read_minutesEv>
mov    %eax,%ebx
call   101b30 <_ZN4CMOS10read_hoursEv>
push   %edi
push   %esi
pushl  0x34(%esp)
pushl  0x34(%esp)
push   %ebx
push   %eax
push   $0x107cdc
push   $0x103bc0
call   105410 <printf_>
add    $0x18,%esp
push   $0x10798f
push   $0x103bc0
call   105410 <printf_>
add    $0x10,%esp
jmp    10072c <_Z11invalid_tssP15interrupt_framem+0x6c>
xchg   %ax,%ax
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
push   %ecx
push   %edx
push   %eax
and    $0xfffffff0,%esp
sub    $0x30,%esp
cld    
call   101d20 <_ZN4CMOS10read_yearsEv>
mov    %eax,%edi
call   101c90 <_ZN4CMOS10read_monthEv>
mov    %eax,%esi
call   101c00 <_ZN4CMOS17read_day_of_monthEv>
mov    %eax,0x2c(%esp)
call   101a10 <_ZN4CMOS12read_secondsEv>
mov    %eax,0x28(%esp)
call   101aa0 <_ZN4CMOS12read_minutesEv>
mov    %eax,%ebx
call   101b30 <_ZN4CMOS10read_hoursEv>
push   %edi
push   %esi
pushl  0x34(%esp)
pushl  0x34(%esp)
push   %ebx
push   %eax
push   $0x107cdc
push   $0x103bc0
call   105410 <printf_>
add    $0x18,%esp
push   $0x10799c
push   $0x103bc0
call   105410 <printf_>
add    $0x10,%esp
jmp    10079c <_Z19segment_not_presentP15interrupt_framem+0x6c>
xchg   %ax,%ax
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
push   %ecx
push   %edx
push   %eax
and    $0xfffffff0,%esp
sub    $0x30,%esp
cld    
call   101d20 <_ZN4CMOS10read_yearsEv>
mov    %eax,%edi
call   101c90 <_ZN4CMOS10read_monthEv>
mov    %eax,%esi
call   101c00 <_ZN4CMOS17read_day_of_monthEv>
mov    %eax,0x2c(%esp)
call   101a10 <_ZN4CMOS12read_secondsEv>
mov    %eax,0x28(%esp)
call   101aa0 <_ZN4CMOS12read_minutesEv>
mov    %eax,%ebx
call   101b30 <_ZN4CMOS10read_hoursEv>
push   %edi
push   %esi
pushl  0x34(%esp)
pushl  0x34(%esp)
push   %ebx
push   %eax
push   $0x107cdc
push   $0x103bc0
call   105410 <printf_>
add    $0x18,%esp
push   $0x1079b1
push   $0x103bc0
call   105410 <printf_>
add    $0x10,%esp
jmp    10080c <_Z15stack_exceptionP15interrupt_framem+0x6c>
xchg   %ax,%ax
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
push   %ecx
push   %edx
push   %eax
and    $0xfffffff0,%esp
sub    $0x30,%esp
cld    
call   101d20 <_ZN4CMOS10read_yearsEv>
mov    %eax,%edi
call   101c90 <_ZN4CMOS10read_monthEv>
mov    %eax,%esi
call   101c00 <_ZN4CMOS17read_day_of_monthEv>
mov    %eax,0x2c(%esp)
call   101a10 <_ZN4CMOS12read_secondsEv>
mov    %eax,0x28(%esp)
call   101aa0 <_ZN4CMOS12read_minutesEv>
mov    %eax,%ebx
call   101b30 <_ZN4CMOS10read_hoursEv>
push   %edi
push   %esi
pushl  0x34(%esp)
pushl  0x34(%esp)
push   %ebx
push   %eax
push   $0x107cdc
push   $0x103bc0
call   105410 <printf_>
add    $0x18,%esp
push   $0x1079c2
push   $0x103bc0
call   105410 <printf_>
add    $0x10,%esp
jmp    10087c <_Z14unknown_error2P15interrupt_framem+0x6c>
xchg   %ax,%ax
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
push   %ecx
push   %edx
push   %eax
and    $0xfffffff0,%esp
sub    $0x30,%esp
cld    
call   101d20 <_ZN4CMOS10read_yearsEv>
mov    %eax,%edi
call   101c90 <_ZN4CMOS10read_monthEv>
mov    %eax,%esi
call   101c00 <_ZN4CMOS17read_day_of_monthEv>
mov    %eax,0x2c(%esp)
call   101a10 <_ZN4CMOS12read_secondsEv>
mov    %eax,0x28(%esp)
call   101aa0 <_ZN4CMOS12read_minutesEv>
mov    %eax,%ebx
call   101b30 <_ZN4CMOS10read_hoursEv>
push   %edi
push   %esi
pushl  0x34(%esp)
pushl  0x34(%esp)
push   %ebx
push   %eax
push   $0x107cdc
push   $0x103bc0
call   105410 <printf_>
add    $0x18,%esp
push   $0x1079d2
push   $0x103bc0
call   105410 <printf_>
add    $0x10,%esp
jmp    1008ec <_Z17coprocessor_errorP15interrupt_framem+0x6c>
xchg   %ax,%ax
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
call   101d20 <_ZN4CMOS10read_yearsEv>
mov    %eax,-0x20(%ebp)
call   101c90 <_ZN4CMOS10read_monthEv>
mov    %eax,-0x1c(%ebp)
call   101c00 <_ZN4CMOS17read_day_of_monthEv>
mov    %eax,%edi
call   101a10 <_ZN4CMOS12read_secondsEv>
mov    %eax,%esi
call   101aa0 <_ZN4CMOS12read_minutesEv>
mov    %eax,%ebx
call   101b30 <_ZN4CMOS10read_hoursEv>
mov    -0x20(%ebp),%ecx
mov    -0x1c(%ebp),%edx
push   %ecx
push   %edx
push   %edi
push   %esi
push   %ebx
push   %eax
push   $0x107cdc
push   $0x103bc0
call   105410 <printf_>
add    $0x18,%esp
push   $0x107d00
push   $0x103bc0
call   105410 <printf_>
add    $0x10,%esp
call   102410 <_ZN12MultiProcess16get_current_taskEv>
mov    %eax,-0x24(%ebp)
call   101d20 <_ZN4CMOS10read_yearsEv>
mov    %eax,-0x20(%ebp)
call   101c90 <_ZN4CMOS10read_monthEv>
mov    %eax,%edi
call   101c00 <_ZN4CMOS17read_day_of_monthEv>
mov    %eax,%esi
call   101a10 <_ZN4CMOS12read_secondsEv>
mov    %eax,-0x1c(%ebp)
call   101aa0 <_ZN4CMOS12read_minutesEv>
mov    %eax,%ebx
call   101b30 <_ZN4CMOS10read_hoursEv>
mov    -0x20(%ebp),%edx
mov    -0x1c(%ebp),%ecx
push   %edx
push   %edi
push   %esi
push   %ecx
push   %ebx
push   %eax
push   $0x107cdc
push   $0x103bc0
call   105410 <printf_>
mov    -0x24(%ebp),%eax
add    $0x20,%esp
mov    0xc(%eax),%ebx
call   101740 <_ZN8Keyboard15get_buffer_sizeEv>
push   %ebx
push   %eax
push   $0x107d34
push   $0x103bc0
call   105410 <printf_>
add    $0x10,%esp
jmp    100a33 <_Z22read_syscall_wait_taskv+0x143>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
nop
call   101d20 <_ZN4CMOS10read_yearsEv>
mov    %eax,-0x20(%ebp)
call   101c90 <_ZN4CMOS10read_monthEv>
mov    %eax,-0x1c(%ebp)
call   101c00 <_ZN4CMOS17read_day_of_monthEv>
mov    %eax,%edi
call   101a10 <_ZN4CMOS12read_secondsEv>
mov    %eax,%esi
call   101aa0 <_ZN4CMOS12read_minutesEv>
mov    %eax,%ebx
call   101b30 <_ZN4CMOS10read_hoursEv>
mov    -0x20(%ebp),%ecx
mov    -0x1c(%ebp),%edx
push   %ecx
push   %edx
push   %edi
push   %esi
push   %ebx
push   %eax
push   $0x107cdc
push   $0x103bc0
call   105410 <printf_>
add    $0x20,%esp
call   101740 <_ZN8Keyboard15get_buffer_sizeEv>
sub    $0x4,%esp
push   %eax
push   $0x107d78
push   $0x103bc0
call   105410 <printf_>
add    $0x10,%esp
call   101740 <_ZN8Keyboard15get_buffer_sizeEv>
mov    -0x24(%ebp),%esi
cmp    %eax,0xc(%esi)
ja     1009d0 <_Z22read_syscall_wait_taskv+0xe0>
call   101d20 <_ZN4CMOS10read_yearsEv>
mov    %eax,-0x20(%ebp)
call   101c90 <_ZN4CMOS10read_monthEv>
mov    %eax,%edi
call   101c00 <_ZN4CMOS17read_day_of_monthEv>
mov    %eax,%esi
call   101a10 <_ZN4CMOS12read_secondsEv>
mov    %eax,-0x1c(%ebp)
call   101aa0 <_ZN4CMOS12read_minutesEv>
mov    %eax,%ebx
call   101b30 <_ZN4CMOS10read_hoursEv>
mov    -0x20(%ebp),%edx
mov    -0x1c(%ebp),%ecx
push   %edx
push   %edi
push   %esi
push   %ecx
push   %ebx
push   %eax
push   $0x107cdc
push   $0x103bc0
call   105410 <printf_>
mov    -0x24(%ebp),%edi
add    $0x20,%esp
mov    0xc(%edi),%ebx
call   101740 <_ZN8Keyboard15get_buffer_sizeEv>
push   %ebx
push   %eax
push   $0x107da8
push   $0x103bc0
call   105410 <printf_>
mov    0xc(%edi),%ebx
add    $0x10,%esp
call   101750 <_ZN8Keyboard10get_bufferEv>
sub    $0x4,%esp
push   %ebx
push   %eax
pushl  0x10(%edi)
call   105660 <memcpy>
pop    %eax
pushl  0xc(%edi)
call   101700 <_ZN8Keyboard15pop_from_bufferEj>
movl   $0x5,0x38(%edi)
add    $0x10,%esp
movb   $0x0,0x40(%edi)
call   101d20 <_ZN4CMOS10read_yearsEv>
mov    %eax,-0x20(%ebp)
call   101c90 <_ZN4CMOS10read_monthEv>
mov    %eax,-0x1c(%ebp)
call   101c00 <_ZN4CMOS17read_day_of_monthEv>
mov    %eax,%edi
call   101a10 <_ZN4CMOS12read_secondsEv>
mov    %eax,%esi
call   101aa0 <_ZN4CMOS12read_minutesEv>
mov    %eax,%ebx
call   101b30 <_ZN4CMOS10read_hoursEv>
mov    -0x20(%ebp),%ecx
mov    -0x1c(%ebp),%edx
push   %ecx
push   %edx
push   %edi
push   %esi
push   %ebx
push   %eax
push   $0x107cdc
push   $0x103bc0
call   105410 <printf_>
add    $0x18,%esp
push   $0x107de0
push   $0x103bc0
call   105410 <printf_>
add    $0x10,%esp
jmp    100b2d <_Z22read_syscall_wait_taskv+0x23d>
nop
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
call   102410 <_ZN12MultiProcess16get_current_taskEv>
mov    %eax,-0x1c(%ebp)
call   101d20 <_ZN4CMOS10read_yearsEv>
mov    %eax,-0x24(%ebp)
call   101c90 <_ZN4CMOS10read_monthEv>
mov    %eax,-0x20(%ebp)
call   101c00 <_ZN4CMOS17read_day_of_monthEv>
mov    %eax,%edi
call   101a10 <_ZN4CMOS12read_secondsEv>
mov    %eax,%esi
call   101aa0 <_ZN4CMOS12read_minutesEv>
mov    %eax,%ebx
call   101b30 <_ZN4CMOS10read_hoursEv>
mov    -0x24(%ebp),%ecx
mov    -0x20(%ebp),%edx
push   %ecx
push   %edx
push   %edi
push   %esi
push   %ebx
push   %eax
push   $0x107cdc
push   $0x103bc0
call   105410 <printf_>
mov    -0x1c(%ebp),%esi
add    $0x1c,%esp
pushl  0x14(%esi)
push   $0x1079e5
push   $0x103bc0
call   105410 <printf_>
pop    %eax
pushl  0x14(%esi)
mov    %esi,-0x1c(%ebp)
call   103940 <_ZN5USTAR13lookup_parsedEPKc>
add    $0x10,%esp
mov    %eax,%ebx
call   101d20 <_ZN4CMOS10read_yearsEv>
mov    %eax,-0x28(%ebp)
call   101c90 <_ZN4CMOS10read_monthEv>
mov    %eax,%edi
call   101c00 <_ZN4CMOS17read_day_of_monthEv>
mov    %eax,-0x24(%ebp)
call   101a10 <_ZN4CMOS12read_secondsEv>
mov    %eax,-0x20(%ebp)
call   101aa0 <_ZN4CMOS12read_minutesEv>
mov    %eax,%esi
call   101b30 <_ZN4CMOS10read_hoursEv>
mov    -0x28(%ebp),%edx
mov    -0x24(%ebp),%ecx
push   %edx
push   %edi
push   %ecx
pushl  -0x20(%ebp)
push   %esi
push   %eax
push   $0x107cdc
push   $0x103bc0
call   105410 <printf_>
add    $0x1c,%esp
pushl  (%ebx)
push   $0x107e14
push   $0x103bc0
call   105410 <printf_>
mov    -0x1c(%ebp),%eax
pop    %edx
pop    %ecx
pushl  0x14(%eax)
push   $0x0
call   102790 <_ZN12MultiProcess6createEPvPKc>
add    $0xc,%esp
push   %eax
pushl  0x4(%ebx)
pushl  0x8(%ebx)
call   103440 <_ZN3ELF18load_static_sourceEPhjPN12MultiProcess7ProcessE>
mov    %eax,(%esp)
call   102820 <_ZN12MultiProcess6appendEPNS_7ProcessE>
add    $0x10,%esp
lea    -0xc(%ebp),%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret    
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x8(%ebp),%ebx
mov    0x1c(%ebx),%eax
cmp    $0x17,%eax
je     100db0 <syscall_handle+0x170>
jbe    100d70 <syscall_handle+0x130>
cmp    $0x37,%eax
je     100e30 <syscall_handle+0x1f0>
cmp    $0x3b,%eax
jne    100dbf <syscall_handle+0x17f>
call   101d20 <_ZN4CMOS10read_yearsEv>
mov    %eax,-0x24(%ebp)
call   101c90 <_ZN4CMOS10read_monthEv>
mov    %eax,-0x20(%ebp)
call   101c00 <_ZN4CMOS17read_day_of_monthEv>
mov    %eax,%edi
call   101a10 <_ZN4CMOS12read_secondsEv>
mov    %eax,-0x1c(%ebp)
call   101aa0 <_ZN4CMOS12read_minutesEv>
mov    %eax,%esi
call   101b30 <_ZN4CMOS10read_hoursEv>
mov    -0x24(%ebp),%ecx
mov    -0x20(%ebp),%edx
push   %ecx
push   %edx
push   %edi
pushl  -0x1c(%ebp)
push   %esi
push   %eax
push   $0x107cdc
push   $0x103bc0
call   105410 <printf_>
add    $0x1c,%esp
pushl  0x18(%ebx)
push   $0x1079e5
push   $0x103bc0
call   105410 <printf_>
pop    %eax
pushl  0x18(%ebx)
call   103940 <_ZN5USTAR13lookup_parsedEPKc>
add    $0x10,%esp
mov    %eax,%esi
call   101d20 <_ZN4CMOS10read_yearsEv>
mov    %eax,-0x28(%ebp)
call   101c90 <_ZN4CMOS10read_monthEv>
mov    %eax,-0x24(%ebp)
call   101c00 <_ZN4CMOS17read_day_of_monthEv>
mov    %eax,-0x1c(%ebp)
call   101a10 <_ZN4CMOS12read_secondsEv>
mov    %eax,-0x20(%ebp)
call   101aa0 <_ZN4CMOS12read_minutesEv>
mov    %eax,%edi
call   101b30 <_ZN4CMOS10read_hoursEv>
mov    -0x28(%ebp),%ecx
mov    -0x24(%ebp),%edx
push   %ecx
push   %edx
pushl  -0x1c(%ebp)
pushl  -0x20(%ebp)
push   %edi
push   %eax
push   $0x107cdc
push   $0x103bc0
call   105410 <printf_>
add    $0x1c,%esp
pushl  (%esi)
push   $0x107e14
push   $0x103bc0
call   105410 <printf_>
pop    %edx
pop    %ecx
pushl  0x18(%ebx)
push   $0x0
call   102790 <_ZN12MultiProcess6createEPvPKc>
add    $0xc,%esp
push   %eax
pushl  0x4(%esi)
pushl  0x8(%esi)
call   103440 <_ZN3ELF18load_static_sourceEPhjPN12MultiProcess7ProcessE>
add    $0x10,%esp
mov    %eax,0x8(%ebp)
lea    -0xc(%ebp),%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    102820 <_ZN12MultiProcess6appendEPNS_7ProcessE>
lea    0x0(%esi,%eiz,1),%esi
xchg   %ax,%ax
test   %eax,%eax
je     100da0 <syscall_handle+0x160>
cmp    $0x4,%eax
jne    100dbf <syscall_handle+0x17f>
cmpl   $0x1,0x18(%ebx)
jne    100e42 <syscall_handle+0x202>
sub    $0x8,%esp
pushl  0x10(%ebx)
pushl  0x14(%ebx)
call   103230 <_ZN8Terminal5writeEPKcj>
add    $0x10,%esp
lea    -0xc(%ebp),%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret    
lea    0x0(%esi,%eiz,1),%esi
sub    $0xc,%esp
push   $0x1008f0
call   1026f0 <_ZN12MultiProcess16append_wait_taskEPFvvE>
add    $0x10,%esp
mov    %ebx,0x8(%ebp)
lea    -0xc(%ebp),%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    102610 <_ZN12MultiProcess5yieldEPN3IRQ14CSITRegisters2E>
call   101d20 <_ZN4CMOS10read_yearsEv>
mov    %eax,-0x24(%ebp)
call   101c90 <_ZN4CMOS10read_monthEv>
mov    %eax,-0x20(%ebp)
call   101c00 <_ZN4CMOS17read_day_of_monthEv>
mov    %eax,%edi
call   101a10 <_ZN4CMOS12read_secondsEv>
mov    %eax,-0x1c(%ebp)
call   101aa0 <_ZN4CMOS12read_minutesEv>
mov    %eax,%esi
call   101b30 <_ZN4CMOS10read_hoursEv>
mov    -0x24(%ebp),%ecx
mov    -0x20(%ebp),%edx
push   %ecx
push   %edx
push   %edi
pushl  -0x1c(%ebp)
push   %esi
push   %eax
push   $0x107cdc
push   $0x103bc0
call   105410 <printf_>
add    $0x1c,%esp
pushl  0x1c(%ebx)
push   $0x107e60
push   $0x103bc0
call   105410 <printf_>
add    $0x10,%esp
jmp    100e1f <syscall_handle+0x1df>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
nop
sub    $0x8,%esp
pushl  0x18(%ebx)
push   $0x0
call   1029c0 <_ZN12MultiProcess4exitEPNS_7ProcessEj>
jmp    100dad <syscall_handle+0x16d>
sub    $0xc,%esp
push   $0x8d
push   $0x107a01
push   $0x107e3c
push   $0x107a13
push   $0x103bc0
call   105410 <printf_>
add    $0x14,%esp
push   $0x8d
push   $0x107a01
push   $0x107e3c
push   $0x107a13
push   $0x105520
call   105410 <printf_>
add    $0x20,%esp
jmp    100e87 <syscall_handle+0x247>
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
mov    %esp,%ebp
sub    $0xc,%esp
cli    
mov    %cr2,%eax
push   %eax
push   $0x107e88
push   $0x103bc0
call   105410 <printf_>
movzwl 0x100270,%eax
add    $0xc,%esp
push   %eax
push   $0x107a26
push   $0x103bc0
call   105410 <printf_>
add    $0x10,%esp
pushl  0x24(%ebp)
pushl  0x28(%ebp)
push   $0x107a3a
push   $0x103bc0
call   105410 <printf_>
pop    %eax
pop    %edx
pushl  0x14(%ebp)
pushl  0x18(%ebp)
pushl  0x1c(%ebp)
pushl  0x20(%ebp)
push   $0x107a44
push   $0x103bc0
call   105410 <printf_>
add    $0x18,%esp
pushl  0xc(%ebp)
pushl  0x10(%ebp)
pushl  0x30(%ebp)
pushl  0x8(%ebp)
push   $0x107a61
push   $0x103bc0
call   105410 <printf_>
add    $0x20,%esp
jmp    100f1a <page_fault_handle+0x8a>
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
mov    %esp,%ebp
sub    $0x10,%esp
cli    
push   $0x107a7e
push   $0x103bc0
call   105410 <printf_>
movzwl 0x100270,%eax
add    $0xc,%esp
push   %eax
push   $0x107a26
push   $0x103bc0
call   105410 <printf_>
add    $0x10,%esp
pushl  0x24(%ebp)
pushl  0x28(%ebp)
push   $0x107a3a
push   $0x103bc0
call   105410 <printf_>
pop    %eax
pop    %edx
pushl  0x14(%ebp)
pushl  0x18(%ebp)
pushl  0x1c(%ebp)
pushl  0x20(%ebp)
push   $0x107a44
push   $0x103bc0
call   105410 <printf_>
add    $0x18,%esp
pushl  0xc(%ebp)
pushl  0x10(%ebp)
pushl  0x30(%ebp)
pushl  0x8(%ebp)
push   $0x107a61
push   $0x103bc0
call   105410 <printf_>
add    $0x20,%esp
jmp    100fa6 <bounds_check_handle+0x86>
lea    0x0(%esi,%eiz,1),%esi
nop
push   %ebp
mov    %esp,%ebp
sub    $0x10,%esp
cli    
push   $0x107a94
push   $0x103bc0
call   105410 <printf_>
movzwl 0x100270,%eax
add    $0xc,%esp
push   %eax
push   $0x107a26
push   $0x103bc0
call   105410 <printf_>
add    $0x10,%esp
pushl  0x24(%ebp)
pushl  0x28(%ebp)
push   $0x107a3a
push   $0x103bc0
call   105410 <printf_>
pop    %eax
pop    %edx
pushl  0x14(%ebp)
pushl  0x18(%ebp)
pushl  0x1c(%ebp)
pushl  0x20(%ebp)
push   $0x107a44
push   $0x103bc0
call   105410 <printf_>
add    $0x18,%esp
pushl  0xc(%ebp)
pushl  0x10(%ebp)
pushl  0x30(%ebp)
pushl  0x8(%ebp)
push   $0x107a61
push   $0x103bc0
call   105410 <printf_>
add    $0x20,%esp
jmp    101036 <general_protection_fault_handle+0x86>
lea    0x0(%esi,%eiz,1),%esi
nop
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
cli    
call   101d20 <_ZN4CMOS10read_yearsEv>
mov    %eax,-0x20(%ebp)
call   101c90 <_ZN4CMOS10read_monthEv>
mov    %eax,-0x1c(%ebp)
call   101c00 <_ZN4CMOS17read_day_of_monthEv>
mov    %eax,%edi
call   101a10 <_ZN4CMOS12read_secondsEv>
mov    %eax,%esi
call   101aa0 <_ZN4CMOS12read_minutesEv>
mov    %eax,%ebx
call   101b30 <_ZN4CMOS10read_hoursEv>
mov    -0x20(%ebp),%ecx
mov    -0x1c(%ebp),%edx
push   %ecx
push   %edx
push   %edi
push   %esi
push   %ebx
push   %eax
push   $0x107cdc
push   $0x103bc0
call   105410 <printf_>
add    $0x18,%esp
push   $0x107aaf
push   $0x103bc0
call   105410 <printf_>
add    $0x10,%esp
jmp    1010a4 <double_fault_handle+0x64>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi),%esi
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    %esp,0x10e8a0
call   101d20 <_ZN4CMOS10read_yearsEv>
mov    %eax,-0x20(%ebp)
call   101c90 <_ZN4CMOS10read_monthEv>
mov    %eax,-0x1c(%ebp)
call   101c00 <_ZN4CMOS17read_day_of_monthEv>
mov    %eax,%edi
call   101a10 <_ZN4CMOS12read_secondsEv>
mov    %eax,%esi
call   101aa0 <_ZN4CMOS12read_minutesEv>
mov    %eax,%ebx
call   101b30 <_ZN4CMOS10read_hoursEv>
mov    -0x20(%ebp),%ecx
mov    -0x1c(%ebp),%edx
push   %ecx
push   %edx
push   %edi
push   %esi
push   %ebx
push   %eax
push   $0x107cdc
push   $0x103bc0
call   105410 <printf_>
add    $0x18,%esp
push   $0x107abd
push   $0x103bc0
call   105410 <printf_>
pop    %eax
pop    %edx
push   $0x28
push   $0x20
call   102ab0 <_ZN3PIC5remapEhh>
movl   $0x2,(%esp)
call   102bf0 <_ZN3PIC14irq_clear_maskEh>
add    $0x10,%esp
call   101d20 <_ZN4CMOS10read_yearsEv>
mov    %eax,-0x20(%ebp)
call   101c90 <_ZN4CMOS10read_monthEv>
mov    %eax,-0x1c(%ebp)
call   101c00 <_ZN4CMOS17read_day_of_monthEv>
mov    %eax,%edi
call   101a10 <_ZN4CMOS12read_secondsEv>
mov    %eax,%esi
call   101aa0 <_ZN4CMOS12read_minutesEv>
mov    %eax,%ebx
call   101b30 <_ZN4CMOS10read_hoursEv>
mov    -0x20(%ebp),%ecx
mov    -0x1c(%ebp),%edx
push   %ecx
push   %edx
push   %edi
push   %esi
push   %ebx
push   %eax
push   $0x107cdc
push   $0x103bc0
call   105410 <printf_>
add    $0x18,%esp
push   $0x107ad6
push   $0x103bc0
call   105410 <printf_>
add    $0x10,%esp
call   105a48 <_ZN3GDT10initialiseEv>
call   101d20 <_ZN4CMOS10read_yearsEv>
mov    %eax,-0x20(%ebp)
call   101c90 <_ZN4CMOS10read_monthEv>
mov    %eax,-0x1c(%ebp)
call   101c00 <_ZN4CMOS17read_day_of_monthEv>
mov    %eax,%edi
call   101a10 <_ZN4CMOS12read_secondsEv>
mov    %eax,%esi
call   101aa0 <_ZN4CMOS12read_minutesEv>
mov    %eax,%ebx
call   101b30 <_ZN4CMOS10read_hoursEv>
mov    -0x20(%ebp),%ecx
mov    -0x1c(%ebp),%edx
push   %ecx
push   %edx
push   %edi
push   %esi
push   %ebx
push   %eax
push   $0x107cdc
push   $0x103bc0
call   105410 <printf_>
add    $0x18,%esp
push   $0x107aee
push   $0x103bc0
call   105410 <printf_>
add    $0xc,%esp
push   $0x400
push   $0x0
push   $0x10e8c0
call   105710 <memset>
movl   $0x10e8c0,(%esp)
movl   $0x100340,0x10e8c0
movl   $0x1003b0,0x10e8c4
movl   $0x100420,0x10e8c8
movl   $0x100490,0x10e8cc
movl   $0x100500,0x10e8d0
movl   $0x1002c7,0x10e8d4
movl   $0x100570,0x10e8d8
movl   $0x1005e0,0x10e8dc
movl   $0x100313,0x10e8e0
movl   $0x100650,0x10e8e4
movl   $0x1006c0,0x10e8e8
movl   $0x100730,0x10e8ec
movl   $0x1007a0,0x10e8f0
movl   $0x1002ed,0x10e8f4
movl   $0x1002a1,0x10e8f8
movl   $0x100810,0x10e8fc
movl   $0x100880,0x10e900
movl   $0x1023d0,0x10e940
movl   $0x100272,0x10eac0
movl   $0x101860,0x10e944
movl   $0x103030,0x10e978
call   100200 <_ZN3IRQ21interrupts_initialiseEPPFvPNS_13CSITRegistersEE>
add    $0x10,%esp
call   101d20 <_ZN4CMOS10read_yearsEv>
mov    %eax,-0x20(%ebp)
call   101c90 <_ZN4CMOS10read_monthEv>
mov    %eax,-0x1c(%ebp)
call   101c00 <_ZN4CMOS17read_day_of_monthEv>
mov    %eax,%edi
call   101a10 <_ZN4CMOS12read_secondsEv>
mov    %eax,%esi
call   101aa0 <_ZN4CMOS12read_minutesEv>
mov    %eax,%ebx
call   101b30 <_ZN4CMOS10read_hoursEv>
mov    -0x20(%ebp),%ecx
mov    -0x1c(%ebp),%edx
push   %ecx
push   %edx
push   %edi
push   %esi
push   %ebx
push   %eax
push   $0x107cdc
push   $0x103bc0
call   105410 <printf_>
add    $0x18,%esp
push   $0x107eb0
push   $0x103bc0
call   105410 <printf_>
sti    
add    $0x10,%esp
call   102d50 <_ZN4Disk10initialiseEv>
call   101d20 <_ZN4CMOS10read_yearsEv>
mov    %eax,-0x20(%ebp)
call   101c90 <_ZN4CMOS10read_monthEv>
mov    %eax,-0x1c(%ebp)
call   101c00 <_ZN4CMOS17read_day_of_monthEv>
mov    %eax,%edi
call   101a10 <_ZN4CMOS12read_secondsEv>
mov    %eax,%esi
call   101aa0 <_ZN4CMOS12read_minutesEv>
mov    %eax,%ebx
call   101b30 <_ZN4CMOS10read_hoursEv>
mov    -0x20(%ebp),%ecx
mov    -0x1c(%ebp),%edx
push   %ecx
push   %edx
push   %edi
push   %esi
push   %ebx
push   %eax
push   $0x107cdc
push   $0x103bc0
call   105410 <printf_>
add    $0x18,%esp
push   $0x107b06
push   $0x103bc0
call   105410 <printf_>
cli    
add    $0x10,%esp
call   102300 <_ZN16MemoryManagement11init_pagingEv>
call   101d20 <_ZN4CMOS10read_yearsEv>
mov    %eax,-0x20(%ebp)
call   101c90 <_ZN4CMOS10read_monthEv>
mov    %eax,-0x1c(%ebp)
call   101c00 <_ZN4CMOS17read_day_of_monthEv>
mov    %eax,%edi
call   101a10 <_ZN4CMOS12read_secondsEv>
mov    %eax,%esi
call   101aa0 <_ZN4CMOS12read_minutesEv>
mov    %eax,%ebx
call   101b30 <_ZN4CMOS10read_hoursEv>
mov    -0x20(%ebp),%ecx
mov    -0x1c(%ebp),%edx
push   %ecx
push   %edx
push   %edi
push   %esi
push   %ebx
push   %eax
push   $0x107cdc
push   $0x103bc0
call   105410 <printf_>
add    $0x18,%esp
push   $0x107b1f
push   $0x103bc0
call   105410 <printf_>
add    $0x10,%esp
call   101d20 <_ZN4CMOS10read_yearsEv>
mov    %eax,-0x20(%ebp)
call   101c90 <_ZN4CMOS10read_monthEv>
mov    %eax,-0x1c(%ebp)
call   101c00 <_ZN4CMOS17read_day_of_monthEv>
mov    %eax,%edi
call   101a10 <_ZN4CMOS12read_secondsEv>
mov    %eax,%esi
call   101aa0 <_ZN4CMOS12read_minutesEv>
mov    %eax,%ebx
call   101b30 <_ZN4CMOS10read_hoursEv>
mov    -0x20(%ebp),%ecx
mov    -0x1c(%ebp),%edx
push   %ecx
push   %edx
push   %edi
push   %esi
push   %ebx
push   %eax
push   $0x107cdc
push   $0x103bc0
call   105410 <printf_>
add    $0x18,%esp
push   $0x107b3a
push   $0x103bc0
call   105410 <printf_>
add    $0xc,%esp
push   $0x0
push   $0x10
push   $0x5
call   1028b0 <_ZN12MultiProcess4initEjjj>
add    $0x10,%esp
call   101d20 <_ZN4CMOS10read_yearsEv>
mov    %eax,-0x20(%ebp)
call   101c90 <_ZN4CMOS10read_monthEv>
mov    %eax,-0x1c(%ebp)
call   101c00 <_ZN4CMOS17read_day_of_monthEv>
mov    %eax,%edi
call   101a10 <_ZN4CMOS12read_secondsEv>
mov    %eax,%esi
call   101aa0 <_ZN4CMOS12read_minutesEv>
mov    %eax,%ebx
call   101b30 <_ZN4CMOS10read_hoursEv>
mov    -0x20(%ebp),%ecx
mov    -0x1c(%ebp),%edx
push   %ecx
push   %edx
push   %edi
push   %esi
push   %ebx
push   %eax
push   $0x107cdc
push   $0x103bc0
call   105410 <printf_>
add    $0x18,%esp
push   $0x107b4e
push   $0x103bc0
call   105410 <printf_>
sti    
movl   $0x1,(%esp)
call   102bf0 <_ZN3PIC14irq_clear_maskEh>
pop    %ecx
pop    %ebx
push   $0xea60
push   $0x0
call   102ce0 <_ZN3PIT16set_reload_valueEht>
add    $0x10,%esp
call   103070 <_ZN8Terminal10initializeEv>
call   101d20 <_ZN4CMOS10read_yearsEv>
mov    %eax,-0x20(%ebp)
call   101c90 <_ZN4CMOS10read_monthEv>
mov    %eax,-0x1c(%ebp)
call   101c00 <_ZN4CMOS17read_day_of_monthEv>
mov    %eax,%edi
call   101a10 <_ZN4CMOS12read_secondsEv>
mov    %eax,%esi
call   101aa0 <_ZN4CMOS12read_minutesEv>
mov    %eax,%ebx
call   101b30 <_ZN4CMOS10read_hoursEv>
mov    -0x20(%ebp),%ecx
mov    -0x1c(%ebp),%edx
push   %ecx
push   %edx
push   %edi
push   %esi
push   %ebx
push   %eax
push   $0x107cdc
push   $0x103bc0
call   105410 <printf_>
add    $0x18,%esp
push   $0x107b68
push   $0x103bc0
call   105410 <printf_>
add    $0x10,%esp
call   101d20 <_ZN4CMOS10read_yearsEv>
mov    %eax,-0x20(%ebp)
call   101c90 <_ZN4CMOS10read_monthEv>
mov    %eax,-0x1c(%ebp)
call   101c00 <_ZN4CMOS17read_day_of_monthEv>
mov    %eax,%edi
call   101a10 <_ZN4CMOS12read_secondsEv>
mov    %eax,%esi
call   101aa0 <_ZN4CMOS12read_minutesEv>
mov    %eax,%ebx
call   101b30 <_ZN4CMOS10read_hoursEv>
mov    -0x20(%ebp),%ecx
mov    -0x1c(%ebp),%edx
push   %ecx
push   %edx
push   %edi
push   %esi
push   %ebx
push   %eax
push   $0x107cdc
push   $0x103bc0
call   105410 <printf_>
add    $0x1c,%esp
pushl  0x10e8a0
push   $0x107b85
push   $0x103bc0
call   105410 <printf_>
pop    %esi
pop    %edi
pushl  0x10e8a0
push   $0x10
call   1029a0 <_ZN12MultiProcess13tss_set_stackEjj>
movl   $0x107b9e,(%esp)
call   103940 <_ZN5USTAR13lookup_parsedEPKc>
mov    %eax,%ebx
pop    %eax
pop    %edx
push   $0x107b9e
push   $0x0
call   102790 <_ZN12MultiProcess6createEPvPKc>
add    $0xc,%esp
push   %eax
pushl  0x4(%ebx)
pushl  0x8(%ebx)
call   103440 <_ZN3ELF18load_static_sourceEPhjPN12MultiProcess7ProcessE>
mov    %eax,(%esp)
call   102820 <_ZN12MultiProcess6appendEPNS_7ProcessE>
add    $0x10,%esp
call   101d20 <_ZN4CMOS10read_yearsEv>
mov    %eax,-0x20(%ebp)
call   101c90 <_ZN4CMOS10read_monthEv>
mov    %eax,-0x1c(%ebp)
call   101c00 <_ZN4CMOS17read_day_of_monthEv>
mov    %eax,%edi
call   101a10 <_ZN4CMOS12read_secondsEv>
mov    %eax,%esi
call   101aa0 <_ZN4CMOS12read_minutesEv>
mov    %eax,%ebx
call   101b30 <_ZN4CMOS10read_hoursEv>
mov    -0x20(%ebp),%ecx
mov    -0x1c(%ebp),%edx
push   %ecx
push   %edx
push   %edi
push   %esi
push   %ebx
push   %eax
push   $0x107cdc
push   $0x103bc0
call   105410 <printf_>
add    $0x18,%esp
push   $0x107bb4
push   $0x103bc0
call   105410 <printf_>
movl   $0x0,(%esp)
call   102bf0 <_ZN3PIC14irq_clear_maskEh>
add    $0x10,%esp
lea    0x0(%esi,%eiz,1),%esi
hlt    
jmp    101640 <kernel_main+0x590>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x8(%ebp),%eax
mov    %eax,-0x24(%ebp)
call   101d20 <_ZN4CMOS10read_yearsEv>
mov    %eax,-0x20(%ebp)
call   101c90 <_ZN4CMOS10read_monthEv>
mov    %eax,-0x1c(%ebp)
call   101c00 <_ZN4CMOS17read_day_of_monthEv>
mov    %eax,%edi
call   101a10 <_ZN4CMOS12read_secondsEv>
mov    %eax,%esi
call   101aa0 <_ZN4CMOS12read_minutesEv>
mov    %eax,%ebx
call   101b30 <_ZN4CMOS10read_hoursEv>
mov    -0x20(%ebp),%ecx
mov    -0x1c(%ebp),%edx
push   %ecx
push   %edx
push   %edi
push   %esi
push   %ebx
push   %eax
push   $0x107cdc
push   $0x103bc0
call   105410 <printf_>
mov    0x10ecc0,%eax
add    $0x1c,%esp
push   %eax
push   $0x107bce
push   $0x103bc0
call   105410 <printf_>
mov    0x10ecc0,%eax
add    $0x10,%esp
cmp    $0x3f,%eax
ja     1016ed <_ZN8Keyboard14push_to_bufferEc+0x9d>
mov    0x10ecc0,%eax
movzbl -0x24(%ebp),%ebx
mov    %bl,0x10ece0(%eax)
mov    0x10ecc0,%eax
add    $0x1,%eax
mov    %eax,0x10ecc0
lea    -0xc(%ebp),%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret    
push   %eax
push   $0x107be8
push   $0x12
push   $0x107ed0
call   105ad0 <_Z16__assertion_failPKcjS0_>
nop
push   %ebp
mov    %esp,%ebp
sub    $0x8,%esp
mov    0x10ecc0,%eax
cmp    0x8(%ebp),%eax
js     10171f <_ZN8Keyboard15pop_from_bufferEj+0x1f>
mov    0x10ecc0,%eax
sub    0x8(%ebp),%eax
mov    %eax,0x10ecc0
leave  
ret    
push   %eax
push   $0x107be8
push   $0x18
push   $0x107f08
call   105ad0 <_Z16__assertion_failPKcjS0_>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
nop
mov    0x10ecc0,%eax
ret    
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi),%esi
mov    $0x10ece0,%eax
ret    
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi),%esi
push   %ebp
mov    %esp,%ebp
push   %ebx
mov    0x8(%ebp),%eax
test   %eax,%eax
je     101800 <_ZN8Keyboard17scan_code_to_charEPKNS_8ScanCodeEPNS_13KeyboardStateE+0xa0>
mov    0x4(%eax),%edx
xor    %ecx,%ecx
cmp    $0x53,%edx
je     1017be <_ZN8Keyboard17scan_code_to_charEPKNS_8ScanCodeEPNS_13KeyboardStateE+0x5e>
mov    0xc(%ebp),%ebx
mov    (%eax),%eax
movzbl (%ebx),%ebx
test   %bl,%bl
je     1017d0 <_ZN8Keyboard17scan_code_to_charEPKNS_8ScanCodeEPNS_13KeyboardStateE+0x70>
test   %eax,%eax
jne    1017be <_ZN8Keyboard17scan_code_to_charEPKNS_8ScanCodeEPNS_13KeyboardStateE+0x5e>
lea    -0x14(%edx),%eax
cmp    $0x19,%eax
jbe    101810 <_ZN8Keyboard17scan_code_to_charEPKNS_8ScanCodeEPNS_13KeyboardStateE+0xb0>
cmp    $0x39,%edx
je     101830 <_ZN8Keyboard17scan_code_to_charEPKNS_8ScanCodeEPNS_13KeyboardStateE+0xd0>
cmp    $0x3e,%edx
je     101840 <_ZN8Keyboard17scan_code_to_charEPKNS_8ScanCodeEPNS_13KeyboardStateE+0xe0>
cmp    $0x3d,%edx
je     101850 <_ZN8Keyboard17scan_code_to_charEPKNS_8ScanCodeEPNS_13KeyboardStateE+0xf0>
test   %bl,%bl
je     1017e0 <_ZN8Keyboard17scan_code_to_charEPKNS_8ScanCodeEPNS_13KeyboardStateE+0x80>
xor    %ecx,%ecx
cmp    $0x46,%edx
ja     1017be <_ZN8Keyboard17scan_code_to_charEPKNS_8ScanCodeEPNS_13KeyboardStateE+0x5e>
movzbl 0x106020(%edx),%ecx
mov    -0x4(%ebp),%ebx
mov    %ecx,%eax
leave  
ret    
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
test   %eax,%eax
jne    1017be <_ZN8Keyboard17scan_code_to_charEPKNS_8ScanCodeEPNS_13KeyboardStateE+0x5e>
lea    0x30(%edx),%ecx
cmp    $0x9,%edx
ja     101789 <_ZN8Keyboard17scan_code_to_charEPKNS_8ScanCodeEPNS_13KeyboardStateE+0x29>
jmp    1017be <_ZN8Keyboard17scan_code_to_charEPKNS_8ScanCodeEPNS_13KeyboardStateE+0x5e>
xchg   %ax,%ax
lea    -0x2e(%edx),%eax
xor    %ecx,%ecx
cmp    $0x18,%eax
ja     1017be <_ZN8Keyboard17scan_code_to_charEPKNS_8ScanCodeEPNS_13KeyboardStateE+0x5e>
movzbl 0x105fd2(%edx),%ecx
jmp    1017be <_ZN8Keyboard17scan_code_to_charEPKNS_8ScanCodeEPNS_13KeyboardStateE+0x5e>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi),%esi
xor    %ecx,%ecx
mov    -0x4(%ebp),%ebx
leave  
mov    %ecx,%eax
ret    
lea    0x0(%esi,%eiz,1),%esi
mov    0xc(%ebp),%eax
mov    $0x41,%ecx
cmp    0x1(%eax),%bl
mov    $0x61,%eax
cmove  %eax,%ecx
lea    -0x14(%ecx,%edx,1),%ecx
jmp    1017be <_ZN8Keyboard17scan_code_to_charEPKNS_8ScanCodeEPNS_13KeyboardStateE+0x5e>
lea    0x0(%esi,%eiz,1),%esi
mov    $0x20,%ecx
jmp    1017be <_ZN8Keyboard17scan_code_to_charEPKNS_8ScanCodeEPNS_13KeyboardStateE+0x5e>
lea    0x0(%esi,%eiz,1),%esi
xchg   %ax,%ax
mov    $0xa,%ecx
jmp    1017be <_ZN8Keyboard17scan_code_to_charEPKNS_8ScanCodeEPNS_13KeyboardStateE+0x5e>
lea    0x0(%esi),%esi
mov    $0x9,%ecx
jmp    1017be <_ZN8Keyboard17scan_code_to_charEPKNS_8ScanCodeEPNS_13KeyboardStateE+0x5e>
lea    0x0(%esi),%esi
push   %ebp
mov    %esp,%ebp
push   %ecx
push   %edx
push   %eax
and    $0xfffffff0,%esp
sub    $0x1c,%esp
push   $0x1
cld    
call   102a70 <_ZN3PIC8send_EOIEh>
movl   $0x60,(%esp)
call   103c20 <inb>
movzbl %al,%eax
mov    %eax,(%esp)
call   101920 <_ZN8Keyboard9scan_codeEh>
add    $0x10,%esp
mov    0x4(%eax),%edx
mov    %edx,%ecx
and    $0xfffffffd,%ecx
cmp    $0x40,%ecx
je     1018d0 <_ZN8Keyboard18keyboard_interruptEPN3IRQ13CSITRegistersE+0x70>
cmp    $0x41,%edx
je     1018e0 <_ZN8Keyboard18keyboard_interruptEPN3IRQ13CSITRegistersE+0x80>
cmp    $0x3c,%edx
je     1018f0 <_ZN8Keyboard18keyboard_interruptEPN3IRQ13CSITRegistersE+0x90>
sub    $0x8,%esp
push   $0x10ed20
push   %eax
call   101760 <_ZN8Keyboard17scan_code_to_charEPKNS_8ScanCodeEPNS_13KeyboardStateE>
add    $0x10,%esp
test   %al,%al
jne    101900 <_ZN8Keyboard18keyboard_interruptEPN3IRQ13CSITRegistersE+0xa0>
lea    -0xc(%ebp),%esp
pop    %eax
pop    %edx
pop    %ecx
pop    %ebp
iret   
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
cmpl   $0x0,(%eax)
sete   0x10ed20
jmp    1018ba <_ZN8Keyboard18keyboard_interruptEPN3IRQ13CSITRegistersE+0x5a>
lea    0x0(%esi,%eiz,1),%esi
cmpl   $0x0,(%eax)
sete   0x10ed21
jmp    1018ba <_ZN8Keyboard18keyboard_interruptEPN3IRQ13CSITRegistersE+0x5a>
lea    0x0(%esi,%eiz,1),%esi
cmpl   $0x0,(%eax)
jne    1018a5 <_ZN8Keyboard18keyboard_interruptEPN3IRQ13CSITRegistersE+0x45>
call   103300 <_ZN8Terminal9char_backEv>
jmp    1018ba <_ZN8Keyboard18keyboard_interruptEPN3IRQ13CSITRegistersE+0x5a>
lea    0x0(%esi,%eiz,1),%esi
sub    $0xc,%esp
movsbl %al,%eax
push   %eax
call   101650 <_ZN8Keyboard14push_to_bufferEc>
add    $0x10,%esp
jmp    1018ba <_ZN8Keyboard18keyboard_interruptEPN3IRQ13CSITRegistersE+0x5a>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
mov    %esp,%ebp
mov    0x8(%ebp),%eax
cmp    $0xd7,%al
ja     101940 <_ZN8Keyboard9scan_codeEh+0x20>
movzbl %al,%eax
pop    %ebp
lea    0x106080(,%eax,8),%eax
ret    
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi),%esi
xor    %eax,%eax
pop    %ebp
ret    
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
mov    %esp,%ebp
sub    $0x10,%esp
movzbl 0x8(%ebp),%eax
push   %eax
push   $0x70
call   103c30 <outb>
movl   $0x71,0x8(%ebp)
add    $0x10,%esp
leave  
jmp    103c20 <inb>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
mov    %esp,%ebp
sub    $0x10,%esp
push   $0xb
push   $0x70
call   103c30 <outb>
movl   $0x71,(%esp)
call   103c20 <inb>
leave  
movzbl %al,%eax
ret    
push   %ebp
mov    %esp,%ebp
sub    $0x10,%esp
push   $0xa
push   $0x70
call   103c30 <outb>
movl   $0x71,(%esp)
call   103c20 <inb>
leave  
shr    $0x7,%al
ret    
push   %ebp
mov    %esp,%ebp
push   %ebx
sub    $0xc,%esp
mov    0x8(%ebp),%ebx
push   $0xb
push   $0x70
call   103c30 <outb>
movl   $0x71,(%esp)
call   103c20 <inb>
add    $0x10,%esp
mov    %eax,%edx
movzbl %bl,%eax
and    $0x4,%edx
jne    1019fd <_Z13bcd_to_binaryh+0x3d>
mov    %ebx,%eax
and    $0xf,%ebx
shr    $0x4,%al
movzbl %al,%eax
lea    (%eax,%eax,4),%eax
lea    (%ebx,%eax,2),%eax
mov    -0x4(%ebp),%ebx
leave  
ret    
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
mov    %esp,%ebp
push   %ebx
sub    $0x4,%esp
lea    0x0(%esi,%eiz,1),%esi
xchg   %ax,%ax
sub    $0x8,%esp
push   $0xa
push   $0x70
call   103c30 <outb>
movl   $0x71,(%esp)
call   103c20 <inb>
add    $0x10,%esp
test   %al,%al
js     101a20 <_ZN4CMOS12read_secondsEv+0x10>
sub    $0x8,%esp
push   $0x0
push   $0x70
call   103c30 <outb>
movl   $0x71,(%esp)
call   103c20 <inb>
mov    %eax,%ebx
pop    %eax
pop    %edx
push   $0xb
push   $0x70
call   103c30 <outb>
movl   $0x71,(%esp)
call   103c20 <inb>
add    $0x10,%esp
mov    %eax,%edx
movzbl %bl,%eax
and    $0x4,%edx
jne    101a8e <_ZN4CMOS12read_secondsEv+0x7e>
mov    %ebx,%eax
and    $0xf,%ebx
shr    $0x4,%al
movzbl %al,%eax
lea    (%eax,%eax,4),%eax
lea    (%ebx,%eax,2),%eax
mov    -0x4(%ebp),%ebx
leave  
ret    
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi),%esi
push   %ebp
mov    %esp,%ebp
push   %ebx
sub    $0x4,%esp
lea    0x0(%esi,%eiz,1),%esi
xchg   %ax,%ax
sub    $0x8,%esp
push   $0xa
push   $0x70
call   103c30 <outb>
movl   $0x71,(%esp)
call   103c20 <inb>
add    $0x10,%esp
test   %al,%al
js     101ab0 <_ZN4CMOS12read_minutesEv+0x10>
sub    $0x8,%esp
push   $0x2
push   $0x70
call   103c30 <outb>
movl   $0x71,(%esp)
call   103c20 <inb>
mov    %eax,%ebx
pop    %eax
pop    %edx
push   $0xb
push   $0x70
call   103c30 <outb>
movl   $0x71,(%esp)
call   103c20 <inb>
add    $0x10,%esp
mov    %eax,%edx
movzbl %bl,%eax
and    $0x4,%edx
jne    101b1e <_ZN4CMOS12read_minutesEv+0x7e>
mov    %ebx,%eax
and    $0xf,%ebx
shr    $0x4,%al
movzbl %al,%eax
lea    (%eax,%eax,4),%eax
lea    (%ebx,%eax,2),%eax
mov    -0x4(%ebp),%ebx
leave  
ret    
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi),%esi
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
sub    $0xc,%esp
lea    0x0(%esi,%eiz,1),%esi
sub    $0x8,%esp
push   $0xa
push   $0x70
call   103c30 <outb>
movl   $0x71,(%esp)
call   103c20 <inb>
add    $0x10,%esp
test   %al,%al
js     101b40 <_ZN4CMOS10read_hoursEv+0x10>
sub    $0x8,%esp
push   $0x4
push   $0x70
call   103c30 <outb>
movl   $0x71,(%esp)
call   103c20 <inb>
mov    %eax,%edi
mov    %eax,%esi
pop    %eax
pop    %edx
push   $0xb
and    $0x7f,%edi
push   $0x70
call   103c30 <outb>
movl   $0x71,(%esp)
call   103c20 <inb>
mov    %edi,%ecx
add    $0x10,%esp
movzbl %cl,%ebx
test   $0x4,%al
jne    101bb4 <_ZN4CMOS10read_hoursEv+0x84>
mov    %edi,%eax
shr    $0x4,%al
movzbl %al,%edi
mov    %esi,%eax
lea    (%edi,%edi,4),%edx
and    $0xf,%eax
lea    (%eax,%edx,2),%ebx
sub    $0x8,%esp
push   $0xb
push   $0x70
call   103c30 <outb>
movl   $0x71,(%esp)
call   103c20 <inb>
add    $0x10,%esp
test   $0x2,%al
jne    101bf1 <_ZN4CMOS10read_hoursEv+0xc1>
mov    %ebx,%eax
mov    $0xaaaaaaab,%edx
mov    %esi,%ecx
mul    %edx
shr    $0x3,%edx
lea    (%edx,%edx,2),%eax
shl    $0x2,%eax
sub    %eax,%ebx
test   %cl,%cl
lea    0xc(%ebx),%eax
cmovs  %eax,%ebx
lea    -0xc(%ebp),%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret    
lea    0x0(%esi,%eiz,1),%esi
nop
push   %ebp
mov    %esp,%ebp
push   %ebx
sub    $0x4,%esp
lea    0x0(%esi,%eiz,1),%esi
xchg   %ax,%ax
sub    $0x8,%esp
push   $0xa
push   $0x70
call   103c30 <outb>
movl   $0x71,(%esp)
call   103c20 <inb>
add    $0x10,%esp
test   %al,%al
js     101c10 <_ZN4CMOS17read_day_of_monthEv+0x10>
sub    $0x8,%esp
push   $0x7
push   $0x70
call   103c30 <outb>
movl   $0x71,(%esp)
call   103c20 <inb>
mov    %eax,%ebx
pop    %eax
pop    %edx
push   $0xb
push   $0x70
call   103c30 <outb>
movl   $0x71,(%esp)
call   103c20 <inb>
add    $0x10,%esp
mov    %eax,%edx
movzbl %bl,%eax
and    $0x4,%edx
jne    101c7e <_ZN4CMOS17read_day_of_monthEv+0x7e>
mov    %ebx,%eax
and    $0xf,%ebx
shr    $0x4,%al
movzbl %al,%eax
lea    (%eax,%eax,4),%eax
lea    (%ebx,%eax,2),%eax
mov    -0x4(%ebp),%ebx
leave  
ret    
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi),%esi
push   %ebp
mov    %esp,%ebp
push   %ebx
sub    $0x4,%esp
lea    0x0(%esi,%eiz,1),%esi
xchg   %ax,%ax
sub    $0x8,%esp
push   $0xa
push   $0x70
call   103c30 <outb>
movl   $0x71,(%esp)
call   103c20 <inb>
add    $0x10,%esp
test   %al,%al
js     101ca0 <_ZN4CMOS10read_monthEv+0x10>
sub    $0x8,%esp
push   $0x8
push   $0x70
call   103c30 <outb>
movl   $0x71,(%esp)
call   103c20 <inb>
mov    %eax,%ebx
pop    %eax
pop    %edx
push   $0xb
push   $0x70
call   103c30 <outb>
movl   $0x71,(%esp)
call   103c20 <inb>
add    $0x10,%esp
mov    %eax,%edx
movzbl %bl,%eax
and    $0x4,%edx
jne    101d0e <_ZN4CMOS10read_monthEv+0x7e>
mov    %ebx,%eax
and    $0xf,%ebx
shr    $0x4,%al
movzbl %al,%eax
lea    (%eax,%eax,4),%eax
lea    (%ebx,%eax,2),%eax
mov    -0x4(%ebp),%ebx
leave  
ret    
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi),%esi
push   %ebp
mov    %esp,%ebp
push   %ebx
sub    $0x4,%esp
lea    0x0(%esi,%eiz,1),%esi
xchg   %ax,%ax
sub    $0x8,%esp
push   $0xa
push   $0x70
call   103c30 <outb>
movl   $0x71,(%esp)
call   103c20 <inb>
add    $0x10,%esp
test   %al,%al
js     101d30 <_ZN4CMOS10read_yearsEv+0x10>
sub    $0x8,%esp
push   $0x9
push   $0x70
call   103c30 <outb>
movl   $0x71,(%esp)
call   103c20 <inb>
mov    %eax,%ebx
pop    %eax
pop    %edx
push   $0xb
push   $0x70
call   103c30 <outb>
movl   $0x71,(%esp)
call   103c20 <inb>
add    $0x10,%esp
mov    %eax,%edx
movzbl %bl,%eax
and    $0x4,%edx
jne    101d9e <_ZN4CMOS10read_yearsEv+0x7e>
mov    %ebx,%eax
and    $0xf,%ebx
shr    $0x4,%al
movzbl %al,%eax
lea    (%eax,%eax,4),%eax
lea    (%ebx,%eax,2),%eax
mov    -0x4(%ebp),%ebx
add    $0x7d0,%eax
leave  
ret    
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
mov    0x10ed24,%eax
mov    %esp,%ebp
mov    0x10(%ebp),%edx
test   %eax,%eax
jne    101dc9 <_Z7kmallocjiPj+0x19>
mov    $0x10f001,%eax
mov    %eax,0x10ed24
cmpl   $0x1,0xc(%ebp)
je     101df0 <_Z7kmallocjiPj+0x40>
test   %edx,%edx
je     101dda <_Z7kmallocjiPj+0x2a>
mov    %eax,(%edx)
mov    0x10ed24,%eax
mov    0x8(%ebp),%edx
pop    %ebp
add    %eax,%edx
mov    %edx,0x10ed24
ret    
lea    0x0(%esi,%eiz,1),%esi
xchg   %ax,%ax
test   $0xfff,%eax
je     101dcf <_Z7kmallocjiPj+0x1f>
and    $0xfffff000,%eax
add    $0x1000,%eax
mov    %eax,0x10ed24
jmp    101dcf <_Z7kmallocjiPj+0x1f>
lea    0x0(%esi,%eiz,1),%esi
nop
mov    0x10ed24,%eax
mov    $0x10f001,%edx
push   %ebp
test   %eax,%eax
cmove  %edx,%eax
mov    %esp,%ebp
mov    %eax,%edx
and    $0xfffff000,%edx
add    $0x1000,%edx
test   $0xfff,%eax
cmovne %edx,%eax
mov    0x8(%ebp),%edx
pop    %ebp
add    %eax,%edx
mov    %edx,0x10ed24
ret    
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
mov    0x10ed24,%eax
mov    %esp,%ebp
mov    0xc(%ebp),%edx
test   %eax,%eax
jne    101e69 <_Z9kmalloc_pjPj+0x19>
mov    $0x10f001,%eax
mov    %eax,0x10ed24
test   %edx,%edx
je     101e74 <_Z9kmalloc_pjPj+0x24>
mov    %eax,(%edx)
mov    0x10ed24,%eax
mov    0x8(%ebp),%edx
pop    %ebp
add    %eax,%edx
mov    %edx,0x10ed24
ret    
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
nop
push   %ebp
mov    0x10ed24,%eax
mov    %esp,%ebp
mov    0xc(%ebp),%edx
test   %eax,%eax
jne    101ea9 <_Z10kmalloc_apjPj+0x19>
mov    $0x10f001,%eax
mov    %eax,0x10ed24
test   $0xfff,%eax
je     101ebf <_Z10kmalloc_apjPj+0x2f>
and    $0xfffff000,%eax
add    $0x1000,%eax
mov    %eax,0x10ed24
test   %edx,%edx
je     101eca <_Z10kmalloc_apjPj+0x3a>
mov    %eax,(%edx)
mov    0x10ed24,%eax
mov    0x8(%ebp),%edx
pop    %ebp
add    %eax,%edx
mov    %edx,0x10ed24
ret    
lea    0x0(%esi,%eiz,1),%esi
xchg   %ax,%ax
mov    0x10ed24,%eax
ret    
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
mov    %esp,%ebp
push   %esi
push   %ebx
mov    0x8(%ebp),%ebx
mov    %ebx,%esi
sub    $0x4,%esp
shr    $0x3,%esi
push   $0x0
push   $0x0
push   %esi
call   101db0 <_Z7kmallocjiPj>
add    $0xc,%esp
mov    %ebx,0x10ed30
push   %esi
push   $0x0
push   %eax
mov    %eax,0x10ed2c
call   105710 <memset>
add    $0x10,%esp
movl   $0x1000000,0x10ed28
lea    -0x8(%ebp),%esp
pop    %ebx
pop    %esi
pop    %ebp
ret    
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
mov    %esp,%ebp
push   %esi
push   %ebx
mov    0x10ed30,%ebx
test   %ebx,%ebx
je     101f81 <_ZN16MemoryManagement16first_free_blockEv+0x41>
mov    0x10ed2c,%esi
xor    %eax,%eax
testb  $0x1,(%esi)
je     101f7a <_ZN16MemoryManagement16first_free_blockEv+0x3a>
lea    0x0(%esi,%eiz,1),%esi
add    $0x1,%eax
cmp    %eax,%ebx
je     101f81 <_ZN16MemoryManagement16first_free_blockEv+0x41>
mov    %eax,%edx
shr    $0x3,%edx
movzbl (%esi,%edx,1),%ecx
mov    %eax,%edx
and    $0x7,%edx
bt     %edx,%ecx
jb     101f60 <_ZN16MemoryManagement16first_free_blockEv+0x20>
lea    -0x8(%ebp),%esp
pop    %ebx
pop    %esi
pop    %ebp
ret    
sub    $0x4,%esp
push   $0x107c05
push   $0x28
push   $0x107c17
call   105ad0 <_Z16__assertion_failPKcjS0_>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
mov    %esp,%ebp
push   %ebx
mov    $0x1,%ebx
sub    $0x4,%esp
call   101f40 <_ZN16MemoryManagement16first_free_blockEv>
mov    %eax,%edx
mov    %eax,%ecx
shr    $0x3,%edx
and    $0x7,%ecx
add    0x10ed2c,%edx
shl    %cl,%ebx
or     %bl,(%edx)
mov    -0x4(%ebp),%ebx
leave  
ret    
lea    0x0(%esi),%esi
push   %ebp
mov    $0x1,%eax
mov    %esp,%ebp
mov    0x8(%ebp),%ecx
mov    %ecx,%edx
and    $0x7,%ecx
shr    $0x3,%edx
shl    %cl,%eax
add    0x10ed2c,%edx
not    %eax
and    %al,(%edx)
pop    %ebp
ret    
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
nop
push   %ebp
mov    $0x1,%eax
mov    %esp,%ebp
mov    0x8(%ebp),%ecx
sub    0x10ed28,%ecx
mov    %ecx,%edx
shr    $0xc,%ecx
and    $0x7,%ecx
shr    $0xf,%edx
add    0x10ed2c,%edx
shl    %cl,%eax
not    %eax
and    %al,(%edx)
pop    %ebp
ret    
lea    0x0(%esi),%esi
push   %ebp
cmpb   $0x0,0x10ed34
mov    %esp,%ebp
push   %esi
mov    0xc(%ebp),%eax
push   %ebx
je     102096 <_ZN16MemoryManagement19virtual_to_physicalEPNS_13PageDirectoryEPv+0x66>
mov    0x8(%ebp),%ebx
mov    %eax,%edx
mov    %eax,%ecx
shr    $0x16,%eax
shr    $0xc,%edx
and    $0xfff,%ecx
mov    0x1000(%ebx,%eax,4),%ebx
and    $0x3ff,%edx
test   %ebx,%ebx
je     1020ba <_ZN16MemoryManagement19virtual_to_physicalEPNS_13PageDirectoryEPv+0x8a>
movzbl 0x1(%ebx,%edx,4),%eax
shr    $0x4,%al
movzbl %al,%esi
movzbl 0x2(%ebx,%edx,4),%eax
shl    $0x4,%eax
or     %eax,%esi
movzbl 0x3(%ebx,%edx,4),%eax
shl    $0xc,%eax
or     %esi,%eax
testb  $0x1,(%ebx,%edx,4)
je     1020a8 <_ZN16MemoryManagement19virtual_to_physicalEPNS_13PageDirectoryEPv+0x78>
lea    -0x8(%ebp),%esp
shl    $0xc,%eax
pop    %ebx
add    %ecx,%eax
pop    %esi
pop    %ebp
ret    
push   %ecx
push   $0x107c05
push   $0x3b
push   $0x107f40
call   105ad0 <_Z16__assertion_failPKcjS0_>
push   %eax
push   $0x107c05
push   $0x42
push   $0x107f64
call   105ad0 <_Z16__assertion_failPKcjS0_>
push   %edx
push   $0x107c05
push   $0x40
push   $0x107c2f
call   105ad0 <_Z16__assertion_failPKcjS0_>
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x8(%ebp),%edi
mov    0xc(%ebp),%ebx
test   %edi,%edi
je     102180 <_ZN16MemoryManagement13allocate_pageEPNS_13PageDirectoryEjjbb+0xb0>
mov    %ebx,%ecx
shr    $0xc,%ebx
shr    $0x16,%ecx
and    $0x3ff,%ebx
lea    0x400(%ecx),%edx
mov    (%edi,%edx,4),%esi
test   %esi,%esi
je     102130 <_ZN16MemoryManagement13allocate_pageEPNS_13PageDirectoryEjjbb+0x60>
testb  $0x1,(%esi,%ebx,4)
jne    102122 <_ZN16MemoryManagement13allocate_pageEPNS_13PageDirectoryEjjbb+0x52>
lea    (%esi,%ebx,4),%edx
mov    0x10(%ebp),%eax
mov    (%edx),%ecx
and    $0xfffff000,%eax
or     $0x7,%eax
and    $0xff8,%ecx
or     %ecx,%eax
mov    %eax,(%edx)
lea    -0xc(%ebp),%esp
lea    (%esi,%ebx,4),%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret    
lea    0x0(%esi),%esi
sub    $0x4,%esp
mov    %edx,-0x20(%ebp)
push   $0x0
push   $0x1
push   $0x1000
mov    %ecx,-0x1c(%ebp)
call   101db0 <_Z7kmallocjiPj>
add    $0xc,%esp
push   $0x1000
mov    %eax,%esi
push   $0x0
push   %eax
call   105710 <memset>
mov    -0x1c(%ebp),%ecx
mov    %esi,%eax
add    $0x10,%esp
and    $0xfffff000,%eax
lea    (%edi,%ecx,4),%ecx
or     $0x7,%eax
mov    (%ecx),%edx
and    $0xff8,%edx
or     %edx,%eax
mov    -0x20(%ebp),%edx
mov    %eax,(%ecx)
mov    %esi,(%edi,%edx,4)
jmp    102102 <_ZN16MemoryManagement13allocate_pageEPNS_13PageDirectoryEjjbb+0x32>
push   %eax
push   $0x107c05
push   $0x48
push   $0x107c47
call   105ad0 <_Z16__assertion_failPKcjS0_>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
sub    $0xc,%esp
mov    0x10(%ebp),%eax
mov    0x8(%ebp),%esi
mov    0xc(%ebp),%edi
test   %eax,%eax
je     1021e4 <_ZN16MemoryManagement14protect_regionEPNS_13PageDirectoryEjm+0x44>
xor    %ebx,%ebx
lea    0x0(%esi,%eiz,1),%esi
nop
sub    $0xc,%esp
lea    (%edi,%ebx,1),%eax
add    $0x1000,%ebx
push   $0x0
push   $0x1
push   $0x0
push   %eax
push   %esi
call   1020d0 <_ZN16MemoryManagement13allocate_pageEPNS_13PageDirectoryEjjbb>
add    $0x20,%esp
andb   $0xf8,(%eax)
cmp    %ebx,0x10(%ebp)
ja     1021c0 <_ZN16MemoryManagement14protect_regionEPNS_13PageDirectoryEjm+0x20>
lea    -0xc(%ebp),%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret    
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
sub    $0xc,%esp
mov    0x10(%ebp),%eax
movzbl 0x18(%ebp),%esi
movzbl 0x14(%ebp),%ebx
test   %eax,%eax
je     102232 <_ZN16MemoryManagement19identity_map_regionEPNS_13PageDirectoryEjmbb+0x42>
xor    %edi,%edi
lea    0x0(%esi),%esi
mov    0xc(%ebp),%eax
sub    $0xc,%esp
push   %esi
add    %edi,%eax
push   %ebx
add    $0x1000,%edi
push   %eax
push   %eax
pushl  0x8(%ebp)
call   1020d0 <_ZN16MemoryManagement13allocate_pageEPNS_13PageDirectoryEjjbb>
add    $0x20,%esp
cmp    %edi,0x10(%ebp)
ja     102210 <_ZN16MemoryManagement19identity_map_regionEPNS_13PageDirectoryEjmbb+0x20>
lea    -0xc(%ebp),%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret    
lea    0x0(%esi),%esi
mov    %cr0,%eax
or     $0x80000001,%eax
mov    %eax,%cr0
ret    
lea    0x0(%esi,%eiz,1),%esi
mov    0x10ed3c,%eax
mov    %eax,%cr3
mov    %eax,0x10ed38
ret    
xchg   %ax,%ax
mov    0x10ed3c,%eax
ret    
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi),%esi
push   %ebp
mov    %esp,%ebp
mov    0x8(%ebp),%eax
mov    %eax,%cr3
mov    %eax,0x10ed38
pop    %ebp
ret    
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x10(%ebp),%eax
movzbl 0x18(%ebp),%edi
movzbl 0x14(%ebp),%esi
test   %eax,%eax
je     1022ed <_ZN16MemoryManagement15allocate_regionEPNS_13PageDirectoryEjjbb+0x6d>
mov    %esi,-0x1c(%ebp)
xor    %ebx,%ebx
lea    0x0(%esi),%esi
call   101f40 <_ZN16MemoryManagement16first_free_blockEv>
mov    $0x1,%esi
sub    $0xc,%esp
mov    %eax,%ecx
mov    %eax,%edx
shl    $0xc,%eax
and    $0x7,%ecx
shr    $0x3,%edx
add    0x10ed2c,%edx
shl    %cl,%esi
mov    %esi,%ecx
or     %cl,(%edx)
add    0x10ed28,%eax
push   %edi
pushl  -0x1c(%ebp)
push   %eax
mov    0xc(%ebp),%eax
add    %ebx,%eax
add    $0x1000,%ebx
push   %eax
pushl  0x8(%ebp)
call   1020d0 <_ZN16MemoryManagement13allocate_pageEPNS_13PageDirectoryEjjbb>
add    $0x20,%esp
cmp    %ebx,0x10(%ebp)
ja     1022a0 <_ZN16MemoryManagement15allocate_regionEPNS_13PageDirectoryEjjbb+0x20>
lea    -0xc(%ebp),%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret    
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
mov    %esp,%ebp
push   %esi
push   %ebx
xor    %ebx,%ebx
sub    $0x4,%esp
push   $0x0
push   $0x1
push   $0x2000
call   101db0 <_Z7kmallocjiPj>
add    $0xc,%esp
push   $0x2000
push   $0x0
push   %eax
mov    %eax,0x10ed3c
call   105710 <memset>
add    $0xc,%esp
mov    0x10ed3c,%eax
movb   $0x1,0x10ed34
push   $0x0
push   $0x0
push   $0x20000
mov    %eax,0x10ed38
call   101db0 <_Z7kmallocjiPj>
add    $0xc,%esp
movl   $0x100000,0x10ed30
push   $0x20000
push   $0x0
push   %eax
mov    %eax,0x10ed2c
call   105710 <memset>
mov    0x10ed3c,%esi
add    $0x10,%esp
movl   $0x1000000,0x10ed28
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
nop
sub    $0xc,%esp
push   $0x1
push   $0x1
push   %ebx
push   %ebx
add    $0x1000,%ebx
push   %esi
call   1020d0 <_ZN16MemoryManagement13allocate_pageEPNS_13PageDirectoryEjjbb>
add    $0x20,%esp
cmp    $0x800000,%ebx
jne    102390 <_ZN16MemoryManagement11init_pagingEv+0x90>
mov    0x10ed3c,%eax
mov    %eax,%cr3
mov    %eax,0x10ed38
mov    %cr0,%eax
or     $0x80000001,%eax
mov    %eax,%cr0
lea    -0x8(%ebp),%esp
pop    %ebx
pop    %esi
pop    %ebp
ret    
nop
push   %eax
push   %ebx
push   %ecx
push   %edx
push   %esi
push   %edi
push   %ebp
call   1024c0 <update_process>
pop    %ebp
pop    %edi
pop    %esi
pop    %edx
pop    %ecx
pop    %ebx
pop    %eax
mov    $0x23,%ax
mov    %eax,%ds
mov    %eax,%es
mov    %eax,%fs
mov    %eax,%gs
iret   
mov    $0x28,%ax
ltr    %ax
ret    
lea    0x0(%esi,%eiz,1),%esi
nop
jmp    102400 <_Z10_idle_codev>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
mov    0x10ed40,%eax
ret    
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi),%esi
push   %ebp
mov    %esp,%ebp
sub    $0x8,%esp
mov    0x10ed40,%eax
mov    0x38(%eax),%edx
test   %edx,%edx
jne    102439 <_Z14find_next_taskv+0x19>
movl   $0x1,0x38(%eax)
mov    0x30(%eax),%edx
mov    0x30(%edx),%eax
mov    %edx,0x10ed40
cmpl   $0x2,0x38(%eax)
jne    102460 <_Z14find_next_taskv+0x40>
lea    0x0(%esi,%eiz,1),%esi
nop
cmp    %eax,%edx
je     102490 <_Z14find_next_taskv+0x70>
mov    0x30(%eax),%eax
cmpl   $0x2,0x38(%eax)
mov    %eax,0x30(%edx)
je     102450 <_Z14find_next_taskv+0x30>
mov    0x38(%edx),%ecx
cmp    $0x2,%ecx
je     102480 <_Z14find_next_taskv+0x60>
cmp    $0x6,%ecx
jne    102476 <_Z14find_next_taskv+0x56>
mov    0x30(%edx),%edx
mov    %edx,0x10ed40
leave  
mov    %edx,%eax
ret    
lea    0x0(%esi),%esi
cmp    %eax,%edx
je     1024a4 <_Z14find_next_taskv+0x84>
mov    %eax,0x10ed40
mov    0x38(%eax),%ecx
mov    %eax,%edx
jmp    102468 <_Z14find_next_taskv+0x48>
sub    $0x4,%esp
push   $0x107c5d
push   $0x19
push   $0x107f84
call   105ad0 <_Z16__assertion_failPKcjS0_>
push   %eax
push   $0x107c5d
push   $0x1f
push   $0x107f84
call   105ad0 <_Z16__assertion_failPKcjS0_>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi),%esi
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
sub    $0x28,%esp
push   $0x0
call   102a70 <_ZN3PIC8send_EOIEh>
mov    0x10ed40,%edx
add    $0x10,%esp
mov    0x38(%edx),%eax
cmp    $0x2,%eax
je     10250a <update_process+0x4a>
cmp    $0x5,%eax
je     10250a <update_process+0x4a>
cmp    $0x4,%eax
je     1025e0 <update_process+0x120>
cmp    $0x3,%eax
je     1025c0 <update_process+0x100>
sub    $0x4,%esp
lea    0x8(%ebp),%eax
push   $0x30
push   %eax
push   %edx
call   105660 <memcpy>
add    $0x10,%esp
call   102420 <_Z14find_next_taskv>
mov    0x10ed40,%eax
cmpl   $0x3,0x38(%eax)
je     1025b0 <update_process+0xf0>
sub    $0x4,%esp
movl   $0x0,0x38(%eax)
push   $0x30
push   %eax
lea    0x8(%ebp),%eax
push   %eax
call   105660 <memcpy>
add    $0x10,%esp
call   101d20 <_ZN4CMOS10read_yearsEv>
mov    %eax,-0x20(%ebp)
call   101c90 <_ZN4CMOS10read_monthEv>
mov    %eax,-0x1c(%ebp)
call   101c00 <_ZN4CMOS17read_day_of_monthEv>
mov    %eax,%edi
call   101a10 <_ZN4CMOS12read_secondsEv>
mov    %eax,%esi
call   101aa0 <_ZN4CMOS12read_minutesEv>
mov    %eax,%ebx
call   101b30 <_ZN4CMOS10read_hoursEv>
mov    -0x20(%ebp),%ecx
mov    -0x1c(%ebp),%edx
push   %ecx
push   %edx
push   %edi
push   %esi
push   %ebx
push   %eax
push   $0x107cdc
push   $0x103bc0
call   105410 <printf_>
mov    0x10ed40,%eax
add    $0x1c,%esp
pushl  0x34(%eax)
push   $0x107fc0
push   $0x103bc0
call   105410 <printf_>
pop    %eax
mov    0x10ed40,%eax
pushl  0x3c(%eax)
call   102270 <_ZN16MemoryManagement13load_page_dirEPNS_13PageDirectoryE>
add    $0x10,%esp
lea    -0xc(%ebp),%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret    
nop
sub    $0x4,%esp
add    $0x48,%eax
push   $0x30
jmp    10252a <update_process+0x6a>
lea    0x0(%esi),%esi
sub    $0x4,%esp
lea    0x8(%ebp),%eax
add    $0x48,%edx
push   $0x30
push   %eax
push   %edx
call   105660 <memcpy>
add    $0x10,%esp
jmp    10250a <update_process+0x4a>
lea    0x0(%esi),%esi
sub    $0x4,%esp
lea    0x8(%ebp),%eax
push   $0x30
push   %eax
push   %edx
call   105660 <memcpy>
mov    0x10ed40,%eax
add    $0x10,%esp
movl   $0x3,0x38(%eax)
jmp    10250a <update_process+0x4a>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi),%esi
push   %ebp
mov    %esp,%ebp
push   %ebx
sub    $0x4,%esp
mov    0x8(%ebp),%eax
mov    0x10ed40,%edx
lea    0x4(%eax),%ebx
mov    0x38(%edx),%eax
cmp    $0x2,%eax
je     10264d <_ZN12MultiProcess5yieldEPN3IRQ14CSITRegisters2E+0x3d>
cmp    $0x5,%eax
je     10264d <_ZN12MultiProcess5yieldEPN3IRQ14CSITRegisters2E+0x3d>
cmp    $0x4,%eax
je     1026d0 <_ZN12MultiProcess5yieldEPN3IRQ14CSITRegisters2E+0xc0>
cmp    $0x3,%eax
je     1026b0 <_ZN12MultiProcess5yieldEPN3IRQ14CSITRegisters2E+0xa0>
sub    $0x4,%esp
push   $0x30
push   %ebx
push   %edx
call   105660 <memcpy>
add    $0x10,%esp
call   102420 <_Z14find_next_taskv>
mov    0x10ed40,%eax
cmpl   $0x3,0x38(%eax)
je     102690 <_ZN12MultiProcess5yieldEPN3IRQ14CSITRegisters2E+0x80>
sub    $0x4,%esp
movl   $0x0,0x38(%eax)
push   $0x30
push   %eax
push   %ebx
call   105660 <memcpy>
add    $0x10,%esp
mov    0x10ed40,%eax
mov    -0x4(%ebp),%ebx
mov    0x3c(%eax),%eax
mov    %eax,0x8(%ebp)
leave  
jmp    102270 <_ZN16MemoryManagement13load_page_dirEPNS_13PageDirectoryE>
lea    0x0(%esi,%eiz,1),%esi
xchg   %ax,%ax
sub    $0x4,%esp
add    $0x48,%eax
push   $0x30
push   %eax
push   %ebx
call   105660 <memcpy>
add    $0x10,%esp
jmp    102673 <_ZN12MultiProcess5yieldEPN3IRQ14CSITRegisters2E+0x63>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
nop
sub    $0x4,%esp
add    $0x48,%edx
push   $0x30
push   %ebx
push   %edx
call   105660 <memcpy>
add    $0x10,%esp
jmp    10264d <_ZN12MultiProcess5yieldEPN3IRQ14CSITRegisters2E+0x3d>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
nop
sub    $0x4,%esp
push   $0x30
push   %ebx
push   %edx
call   105660 <memcpy>
mov    0x10ed40,%eax
add    $0x10,%esp
movl   $0x3,0x38(%eax)
jmp    10264d <_ZN12MultiProcess5yieldEPN3IRQ14CSITRegisters2E+0x3d>
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x10ed40,%eax
mov    0x8(%ebp),%ebx
mov    0x44(%eax),%edx
mov    %ebx,0x64(%eax)
movb   $0x1,0x40(%eax)
mov    %edx,0x48(%eax)
add    $0x1000,%edx
mov    %edx,0x70(%eax)
movl   $0x4,0x38(%eax)
call   101d20 <_ZN4CMOS10read_yearsEv>
mov    %eax,-0x20(%ebp)
call   101c90 <_ZN4CMOS10read_monthEv>
mov    %eax,-0x1c(%ebp)
call   101c00 <_ZN4CMOS17read_day_of_monthEv>
mov    %eax,%edi
call   101a10 <_ZN4CMOS12read_secondsEv>
mov    %eax,%esi
call   101aa0 <_ZN4CMOS12read_minutesEv>
mov    %eax,%ebx
call   101b30 <_ZN4CMOS10read_hoursEv>
mov    -0x20(%ebp),%ecx
mov    -0x1c(%ebp),%edx
push   %ecx
push   %edx
push   %edi
push   %esi
push   %ebx
push   %eax
push   $0x107cdc
push   $0x103bc0
call   105410 <printf_>
mov    0x10ed40,%eax
add    $0x20,%esp
pushl  0x8(%ebp)
pushl  0x34(%eax)
push   $0x107fe4
push   $0x103bc0
call   105410 <printf_>
add    $0x10,%esp
lea    -0xc(%ebp),%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret    
lea    0x0(%esi,%eiz,1),%esi
nop
push   %ebp
mov    %esp,%ebp
push   %ebx
sub    $0x8,%esp
push   $0x0
push   $0x0
push   $0x78
call   101db0 <_Z7kmallocjiPj>
add    $0xc,%esp
push   $0x0
mov    %eax,%ebx
push   $0x1
push   $0x2000
call   101db0 <_Z7kmallocjiPj>
add    $0xc,%esp
movb   $0x0,0x40(%ebx)
mov    %eax,0x3c(%ebx)
mov    0xc(%ebp),%eax
movl   $0x1,0x38(%ebx)
mov    %eax,0x34(%ebx)
mov    0x8(%ebp),%eax
movl   $0x23,0x2c(%ebx)
movl   $0x202,0x24(%ebx)
movl   $0x1b,0x20(%ebx)
mov    %eax,0x1c(%ebx)
movl   $0x23,0x74(%ebx)
movl   $0x202,0x6c(%ebx)
movl   $0x1b,0x68(%ebx)
push   $0x0
push   $0x0
push   $0x1000
call   101db0 <_Z7kmallocjiPj>
mov    %eax,0x44(%ebx)
mov    %ebx,%eax
mov    -0x4(%ebp),%ebx
leave  
ret    
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
nop
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x10ed40,%eax
mov    0x8(%ebp),%ebx
mov    0x30(%eax),%edx
mov    %edx,0x30(%ebx)
mov    %ebx,0x30(%eax)
call   101d20 <_ZN4CMOS10read_yearsEv>
mov    %eax,-0x20(%ebp)
call   101c90 <_ZN4CMOS10read_monthEv>
mov    %eax,-0x1c(%ebp)
call   101c00 <_ZN4CMOS17read_day_of_monthEv>
mov    %eax,%edi
call   101a10 <_ZN4CMOS12read_secondsEv>
mov    %eax,%esi
call   101aa0 <_ZN4CMOS12read_minutesEv>
mov    %eax,%ebx
call   101b30 <_ZN4CMOS10read_hoursEv>
mov    -0x20(%ebp),%ecx
mov    -0x1c(%ebp),%edx
push   %ecx
push   %edx
push   %edi
push   %esi
push   %ebx
push   %eax
push   $0x107cdc
push   $0x103bc0
call   105410 <printf_>
mov    0x8(%ebp),%eax
add    $0x1c,%esp
pushl  0x34(%eax)
push   $0x10801c
push   $0x103bc0
call   105410 <printf_>
add    $0x10,%esp
lea    -0xc(%ebp),%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret    
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
mov    %esp,%ebp
push   %esi
push   %ebx
mov    0xc(%ebp),%esi
mov    0x10(%ebp),%ebx
sub    $0xc,%esp
push   $0x0
push   $0xe9
push   $0x10edc8
push   $0x10ed60
pushl  0x8(%ebp)
call   100170 <_ZN3GDT8set_gateEijjhh>
add    $0x1c,%esp
push   $0x68
push   $0x0
push   $0x10ed60
call   105710 <memset>
add    $0x10,%esp
mov    %esi,0x10ed68
mov    %ebx,0x10ed64
movl   $0xb,0x10edac
movl   $0x13,0x10edb4
movl   $0x13,0x10eda8
movl   $0x13,0x10edb8
movl   $0x13,0x10edbc
movl   $0x13,0x10edb0
call   1023f0 <tss_flush>
sub    $0x4,%esp
push   $0x0
push   $0x0
push   $0x78
call   101db0 <_Z7kmallocjiPj>
add    $0x10,%esp
movl   $0x107c75,0x34(%eax)
mov    %eax,%ebx
movl   $0x2,0x38(%eax)
mov    %eax,0x30(%eax)
mov    %eax,0x10ed40
call   102260 <_ZN16MemoryManagement19get_kernel_page_dirEv>
sub    $0x8,%esp
mov    %eax,0x3c(%ebx)
push   $0x107c7c
push   $0x102400
call   102790 <_ZN12MultiProcess6createEPvPKc>
add    $0x10,%esp
mov    %eax,%ebx
call   102260 <_ZN16MemoryManagement19get_kernel_page_dirEv>
movl   $0x6,0x38(%ebx)
mov    %eax,0x3c(%ebx)
mov    %ebx,0x8(%ebp)
lea    -0x8(%ebp),%esp
pop    %ebx
pop    %esi
pop    %ebp
jmp    102820 <_ZN12MultiProcess6appendEPNS_7ProcessE>
lea    0x0(%esi),%esi
push   %ebp
mov    %esp,%ebp
mov    0x8(%ebp),%eax
mov    %eax,0x10ed68
mov    0xc(%ebp),%eax
pop    %ebp
mov    %eax,0x10ed64
ret    
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x8(%ebp),%ebx
test   %ebx,%ebx
cmove  0x10ed40,%ebx
movl   $0x2,0x38(%ebx)
call   101d20 <_ZN4CMOS10read_yearsEv>
mov    %eax,-0x24(%ebp)
call   101c90 <_ZN4CMOS10read_monthEv>
mov    %eax,-0x20(%ebp)
call   101c00 <_ZN4CMOS17read_day_of_monthEv>
mov    %eax,%edi
call   101a10 <_ZN4CMOS12read_secondsEv>
mov    %eax,-0x1c(%ebp)
call   101aa0 <_ZN4CMOS12read_minutesEv>
mov    %eax,%esi
call   101b30 <_ZN4CMOS10read_hoursEv>
mov    -0x24(%ebp),%ecx
mov    -0x20(%ebp),%edx
push   %ecx
push   %edx
push   %edi
pushl  -0x1c(%ebp)
push   %esi
push   %eax
push   $0x107cdc
push   $0x103bc0
call   105410 <printf_>
add    $0x20,%esp
pushl  0xc(%ebp)
pushl  0x34(%ebx)
push   $0x108068
push   $0x103bc0
call   105410 <printf_>
add    $0x10,%esp
lea    -0xc(%ebp),%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret    
lea    0x0(%esi,%eiz,1),%esi
xchg   %ax,%ax
push   %ebp
mov    %esp,%ebp
push   %ebx
sub    $0xc,%esp
mov    %eax,%ebx
push   %ebx
pushl  0x10ed40
call   1029c0 <_ZN12MultiProcess4exitEPNS_7ProcessEj>
add    $0x10,%esp
jmp    102a68 <_ZN12MultiProcess3endEv+0x18>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
mov    %esp,%ebp
sub    $0x8,%esp
cmpb   $0x7,0x8(%ebp)
ja     102a90 <_ZN3PIC8send_EOIEh+0x20>
sub    $0x8,%esp
push   $0x20
push   $0x20
call   103c30 <outb>
add    $0x10,%esp
leave  
ret    
lea    0x0(%esi),%esi
sub    $0x8,%esp
push   $0x20
push   $0xa0
call   103c30 <outb>
add    $0x10,%esp
jmp    102a7c <_ZN3PIC8send_EOIEh+0xc>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
nop
push   %ebp
mov    %esp,%ebp
push   %esi
push   %ebx
mov    0x8(%ebp),%esi
mov    0xc(%ebp),%ebx
sub    $0x8,%esp
movzbl %bl,%ebx
push   $0x11
push   $0x20
call   103c30 <outb>
add    $0x10,%esp
call   103c40 <io_wait>
sub    $0x8,%esp
push   $0x11
push   $0xa0
call   103c30 <outb>
add    $0x10,%esp
call   103c40 <io_wait>
mov    %esi,%eax
sub    $0x8,%esp
movzbl %al,%esi
push   %esi
push   $0x21
call   103c30 <outb>
add    $0x10,%esp
call   103c40 <io_wait>
sub    $0x8,%esp
push   %ebx
push   $0xa1
call   103c30 <outb>
add    $0x10,%esp
call   103c40 <io_wait>
sub    $0x8,%esp
push   $0x4
push   $0x21
call   103c30 <outb>
add    $0x10,%esp
call   103c40 <io_wait>
sub    $0x8,%esp
push   $0x2
push   $0xa1
call   103c30 <outb>
add    $0x10,%esp
call   103c40 <io_wait>
sub    $0x8,%esp
push   $0x1
push   $0x21
call   103c30 <outb>
add    $0x10,%esp
call   103c40 <io_wait>
sub    $0x8,%esp
push   $0x1
push   $0xa1
call   103c30 <outb>
add    $0x10,%esp
call   103c40 <io_wait>
sub    $0x8,%esp
push   $0xff
push   $0x21
call   103c30 <outb>
add    $0x10,%esp
call   103c40 <io_wait>
movl   $0xff,0xc(%ebp)
movl   $0xa1,0x8(%ebp)
lea    -0x8(%ebp),%esp
pop    %ebx
pop    %esi
pop    %ebp
jmp    103c30 <outb>
lea    0x0(%esi),%esi
push   %ebp
mov    %esp,%ebp
push   %esi
mov    0x8(%ebp),%eax
push   %ebx
cmp    $0x7,%al
jbe    102be0 <_ZN3PIC12irq_set_maskEh+0x40>
lea    -0x8(%eax),%esi
mov    $0xa1,%ebx
sub    $0xc,%esp
push   %ebx
call   103c20 <inb>
pop    %edx
mov    $0x1,%edx
pop    %ecx
mov    %esi,%ecx
shl    %cl,%edx
or     %edx,%eax
movzbl %al,%eax
push   %eax
push   %ebx
call   103c30 <outb>
add    $0x10,%esp
lea    -0x8(%ebp),%esp
pop    %ebx
pop    %esi
pop    %ebp
ret    
xchg   %ax,%ax
mov    %eax,%esi
mov    $0x21,%ebx
jmp    102bb4 <_ZN3PIC12irq_set_maskEh+0x14>
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
mov    %esp,%ebp
push   %esi
mov    0x8(%ebp),%eax
push   %ebx
cmp    $0x7,%al
jbe    102c30 <_ZN3PIC14irq_clear_maskEh+0x40>
lea    -0x8(%eax),%esi
mov    $0xa1,%ebx
sub    $0xc,%esp
push   %ebx
call   103c20 <inb>
mov    %eax,%edx
pop    %eax
mov    $0xfffffffe,%eax
pop    %ecx
mov    %esi,%ecx
rol    %cl,%eax
and    %edx,%eax
movzbl %al,%eax
push   %eax
push   %ebx
call   103c30 <outb>
add    $0x10,%esp
lea    -0x8(%ebp),%esp
pop    %ebx
pop    %esi
pop    %ebp
ret    
mov    %eax,%esi
mov    $0x21,%ebx
jmp    102c04 <_ZN3PIC14irq_clear_maskEh+0x14>
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
mov    %esp,%ebp
push   %ebx
sub    $0xc,%esp
push   $0xa
push   $0x20
call   103c30 <outb>
pop    %eax
pop    %edx
push   $0xa
push   $0xa0
call   103c30 <outb>
movl   $0xa0,(%esp)
call   103c20 <inb>
movl   $0x20,(%esp)
mov    %eax,%ebx
call   103c20 <inb>
shl    $0x8,%ebx
movzbl %al,%eax
or     %ebx,%eax
mov    -0x4(%ebp),%ebx
leave  
ret    
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
mov    %esp,%ebp
push   %ebx
sub    $0xc,%esp
push   $0xb
push   $0x20
call   103c30 <outb>
pop    %eax
pop    %edx
push   $0xb
push   $0xa0
call   103c30 <outb>
movl   $0xa0,(%esp)
call   103c20 <inb>
movl   $0x20,(%esp)
mov    %eax,%ebx
call   103c20 <inb>
shl    $0x8,%ebx
movzbl %al,%eax
or     %ebx,%eax
mov    -0x4(%ebp),%ebx
leave  
ret    
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
mov    %esp,%ebp
push   %esi
mov    0x8(%ebp),%esi
push   %ebx
mov    0xc(%ebp),%ebx
mov    %esi,%eax
shl    $0x6,%eax
sub    $0x8,%esp
or     $0x34,%eax
movzbl %al,%eax
push   %eax
push   $0x43
call   103c30 <outb>
mov    %esi,%eax
movzbl %al,%esi
pop    %eax
movzbl %bl,%eax
pop    %edx
add    $0x40,%esi
push   %eax
movzbl %bh,%ebx
push   %esi
call   103c30 <outb>
mov    %ebx,0xc(%ebp)
add    $0x10,%esp
mov    %esi,0x8(%ebp)
lea    -0x8(%ebp),%esp
pop    %ebx
pop    %esi
pop    %ebp
jmp    103c30 <outb>
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
mov    $0xe0f9751b,%edx
mov    %edx,%eax
mov    %esp,%ebp
mull   0x8(%ebp)
pop    %ebp
mov    %edx,%eax
shr    $0x14,%eax
ret    
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
sub    $0x28,%esp
push   $0xe
call   102ba0 <_ZN3PIC12irq_set_maskEh>
movb   $0x0,0x10ede0
add    $0x10,%esp
lea    0x0(%esi),%esi
sub    $0xc,%esp
push   $0x1f7
call   103c20 <inb>
add    $0x10,%esp
test   %al,%al
js     102d70 <_ZN4Disk10initialiseEv+0x20>
sub    $0x8,%esp
push   $0xa0
push   $0x1f6
call   103c30 <outb>
pop    %eax
pop    %edx
push   $0xec
push   $0x1f7
call   103c30 <outb>
movl   $0xe,(%esp)
call   102bf0 <_ZN3PIC14irq_clear_maskEh>
add    $0x10,%esp
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi),%esi
movzbl 0x10ede0,%eax
test   %al,%al
je     102dc0 <_ZN4Disk10initialiseEv+0x70>
sub    $0x4,%esp
push   $0x0
push   $0x0
push   $0x200
call   101db0 <_Z7kmallocjiPj>
add    $0xc,%esp
push   $0x0
mov    %eax,%ebx
push   $0x0
push   $0x200
mov    %eax,-0x20(%ebp)
call   101db0 <_Z7kmallocjiPj>
mov    %ebx,%edx
lea    0x200(%ebx),%ebx
add    $0x10,%esp
mov    %eax,-0x24(%ebp)
sub    %edx,%eax
mov    %edx,%edi
mov    %ebx,-0x1c(%ebp)
mov    %eax,%ebx
lea    0x0(%esi,%eiz,1),%esi
sub    $0xc,%esp
lea    (%edi,%ebx,1),%esi
push   $0x1f0
call   103c50 <inw>
mov    %edi,%ecx
add    $0x10,%esp
add    $0x2,%edi
mov    %ax,(%ecx)
rol    $0x8,%ax
mov    %ax,(%esi)
cmp    -0x1c(%ebp),%edi
jne    102e10 <_ZN4Disk10initialiseEv+0xc0>
mov    -0x24(%ebp),%edx
lea    0x5d(%edx),%eax
add    $0x36,%edx
jmp    102e5a <_ZN4Disk10initialiseEv+0x10a>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
movb   $0x0,(%eax)
sub    $0x1,%eax
cmp    %edx,%eax
je     102e5f <_ZN4Disk10initialiseEv+0x10f>
cmpb   $0x20,(%eax)
je     102e50 <_ZN4Disk10initialiseEv+0x100>
mov    -0x20(%ebp),%edx
movzwl 0x2(%edx),%eax
mov    %ax,0x10edc8
movzwl 0x6(%edx),%eax
mov    %ax,0x10edca
movzwl 0xc(%edx),%eax
mov    %ax,0x10edcc
lea    -0xc(%ebp),%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret    
lea    0x0(%esi,%eiz,1),%esi
nop
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
sub    $0x28,%esp
mov    0xc(%ebp),%eax
mov    0x10(%ebp),%ebx
push   $0xe
mov    %eax,-0x1c(%ebp)
call   102ba0 <_ZN3PIC12irq_set_maskEh>
movzwl 0x10edcc,%edi
movzwl 0x8(%ebp),%eax
add    $0x10,%esp
movzwl 0x10edca,%edx
mov    %edi,%ecx
imul   %edx,%edi
cltd   
idiv   %edi
xor    %edx,%edx
mov    %eax,%esi
movzwl 0x8(%ebp),%eax
div    %cx
mov    %edx,%edi
xor    %edx,%edx
divw   0x10edca
add    $0x1,%edi
mov    %dx,-0x1e(%ebp)
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi),%esi
sub    $0xc,%esp
push   $0x1f7
call   103c20 <inb>
add    $0x10,%esp
test   %al,%al
js     102ef0 <_ZN4Disk12read_sectorsEjtPh+0x60>
mov    -0x1c(%ebp),%ecx
mov    $0x0,%edx
cmp    $0x100,%cx
movzbl %cl,%eax
cmove  %edx,%eax
sub    $0x8,%esp
push   %eax
push   $0x1f2
call   103c30 <outb>
pop    %eax
mov    %edi,%eax
pop    %edx
movzbl %al,%edi
push   %edi
push   $0x1f3
call   103c30 <outb>
mov    %esi,%eax
pop    %ecx
pop    %edi
movzbl %al,%eax
shr    $0x8,%esi
push   %eax
push   $0x1f4
call   103c30 <outb>
pop    %eax
pop    %edx
push   %esi
push   $0x1f5
call   103c30 <outb>
movzbl -0x1e(%ebp),%eax
pop    %ecx
pop    %esi
or     $0xffffffa0,%eax
movzbl %al,%eax
push   %eax
push   $0x1f6
call   103c30 <outb>
pop    %edi
pop    %eax
push   $0x8
push   $0x3f6
call   103c30 <outb>
add    $0x10,%esp
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
nop
sub    $0xc,%esp
push   $0x1f7
call   103c20 <inb>
add    $0x10,%esp
test   $0x40,%al
je     102f90 <_ZN4Disk12read_sectorsEjtPh+0x100>
sub    $0x8,%esp
push   $0x21
push   $0x1f7
call   103c30 <outb>
movl   $0xe,(%esp)
movb   $0x0,0x10ede0
call   102bf0 <_ZN3PIC14irq_clear_maskEh>
add    $0x10,%esp
lea    0x0(%esi,%eiz,1),%esi
movzbl 0x10ede0,%eax
test   %al,%al
je     102fd0 <_ZN4Disk12read_sectorsEjtPh+0x140>
sub    $0xc,%esp
push   $0x1f7
call   103c20 <inb>
add    $0x10,%esp
test   $0x8,%al
je     103022 <_ZN4Disk12read_sectorsEjtPh+0x192>
movzwl -0x1c(%ebp),%esi
shl    $0x9,%esi
je     103022 <_ZN4Disk12read_sectorsEjtPh+0x192>
xor    %edi,%edi
lea    0x0(%esi),%esi
sub    $0xc,%esp
push   $0x1f0
call   103c50 <inw>
add    $0x10,%esp
mov    %al,(%ebx,%edi,1)
shr    $0x8,%ax
mov    %al,0x1(%ebx,%edi,1)
add    $0x2,%edi
cmp    %esi,%edi
jb     103000 <_ZN4Disk12read_sectorsEjtPh+0x170>
lea    -0xc(%ebp),%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret    
lea    0x0(%esi),%esi
push   %ebp
mov    %esp,%ebp
push   %ecx
push   %edx
push   %eax
and    $0xfffffff0,%esp
sub    $0x1c,%esp
movb   $0x1,0x10ede0
push   $0x1f7
cld    
call   103c20 <inb>
movl   $0xe,(%esp)
call   102a70 <_ZN3PIC8send_EOIEh>
add    $0x10,%esp
lea    -0xc(%ebp),%esp
pop    %eax
pop    %edx
pop    %ecx
pop    %ebp
iret   
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
movl   $0x0,0x10edf0
mov    $0xb80a0,%edx
movl   $0x0,0x10edec
movb   $0x7,0x10ede8
movl   $0xb8000,0x10ede4
lea    0x0(%esi),%esi
lea    -0xa0(%edx),%eax
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi),%esi
mov    $0x720,%ecx
add    $0x2,%eax
mov    %cx,-0x2(%eax)
cmp    %edx,%eax
jne    1030b0 <_ZN8Terminal10initializeEv+0x40>
lea    0xa0(%eax),%edx
cmp    $0xb8fa0,%eax
jne    1030a0 <_ZN8Terminal10initializeEv+0x30>
ret    
xchg   %ax,%ax
push   %ebp
mov    %esp,%ebp
mov    0x8(%ebp),%eax
pop    %ebp
mov    %al,0x10ede8
ret    
lea    0x0(%esi),%esi
push   %ebp
mov    %esp,%ebp
movzbl 0xc(%ebp),%edx
mov    0x14(%ebp),%eax
mov    %edx,%ecx
movzbl 0x8(%ebp),%edx
lea    (%eax,%eax,4),%eax
shl    $0x8,%ecx
shl    $0x4,%eax
add    0x10(%ebp),%eax
or     %ecx,%edx
mov    0x10ede4,%ecx
mov    %dx,(%ecx,%eax,2)
pop    %ebp
ret    
lea    0x0(%esi),%esi
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
sub    $0xc,%esp
mov    0x8(%ebp),%eax
mov    0x10edf0,%ecx
cmp    $0xa,%al
je     1031d0 <_ZN8Terminal7putcharEc+0xc0>
movzbl 0x10ede8,%edi
lea    (%ecx,%ecx,4),%edx
movzbl %al,%eax
mov    0x10edec,%ebx
mov    0x10ede4,%esi
shl    $0x4,%edx
shl    $0x8,%edi
add    %ebx,%edx
or     %edi,%eax
mov    %ax,(%esi,%edx,2)
lea    0x1(%ebx),%eax
cmp    $0x4f,%ebx
je     103170 <_ZN8Terminal7putcharEc+0x60>
mov    %eax,0x10edec
lea    -0xc(%ebp),%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret    
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi),%esi
movl   $0x0,0x10edec
add    $0x1,%ecx
mov    %ecx,0x10edf0
cmp    $0x19,%ecx
jne    10315e <_ZN8Terminal7putcharEc+0x4e>
sub    $0x4,%esp
lea    0xa0(%esi),%eax
push   $0xf00
push   %eax
push   %esi
call   1056a0 <memmove>
mov    0x10ede4,%eax
add    $0xc,%esp
push   $0xa0
add    $0xf00,%eax
push   $0x0
push   %eax
call   105710 <memset>
subl   $0x1,0x10edf0
add    $0x10,%esp
jmp    10315e <_ZN8Terminal7putcharEc+0x4e>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi),%esi
add    $0x1,%ecx
mov    %ecx,0x10edf0
cmp    $0x18,%ecx
ja     1031f0 <_ZN8Terminal7putcharEc+0xe0>
movl   $0x0,0x10edec
lea    -0xc(%ebp),%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret    
mov    0x10ede4,%eax
sub    $0x4,%esp
push   $0xf00
lea    0xa0(%eax),%edx
push   %edx
push   %eax
call   1056a0 <memmove>
mov    0x10ede4,%eax
add    $0xc,%esp
push   $0xa0
add    $0xf00,%eax
push   $0x0
push   %eax
call   105710 <memset>
subl   $0x1,0x10edf0
add    $0x10,%esp
jmp    1031de <_ZN8Terminal7putcharEc+0xce>
push   %ebp
mov    %esp,%ebp
push   %esi
mov    0xc(%ebp),%esi
push   %ebx
test   %esi,%esi
je     103266 <_ZN8Terminal5writeEPKcj+0x36>
mov    0x8(%ebp),%ebx
add    %ebx,%esi
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
nop
movsbl (%ebx),%eax
sub    $0xc,%esp
add    $0x1,%ebx
push   %eax
call   103110 <_ZN8Terminal7putcharEc>
add    $0x10,%esp
cmp    %ebx,%esi
jne    103250 <_ZN8Terminal5writeEPKcj+0x20>
lea    -0x8(%ebp),%esp
pop    %ebx
pop    %esi
pop    %ebp
ret    
lea    0x0(%esi),%esi
push   %ebp
mov    %esp,%ebp
push   %esi
push   %ebx
mov    0x8(%ebp),%ebx
sub    $0xc,%esp
push   %ebx
call   105740 <strlen>
add    $0x10,%esp
test   %eax,%eax
je     1032a6 <_ZN8Terminal11writestringEPKc+0x36>
lea    (%ebx,%eax,1),%esi
lea    0x0(%esi,%eiz,1),%esi
nop
movsbl (%ebx),%eax
sub    $0xc,%esp
add    $0x1,%ebx
push   %eax
call   103110 <_ZN8Terminal7putcharEc>
add    $0x10,%esp
cmp    %ebx,%esi
jne    103290 <_ZN8Terminal11writestringEPKc+0x20>
lea    -0x8(%ebp),%esp
pop    %ebx
pop    %esi
pop    %ebp
ret    
lea    0x0(%esi),%esi
push   %ebp
mov    %esp,%ebp
push   %esi
mov    0x8(%ebp),%eax
push   %ebx
mov    $0xfa0,%ebx
lea    (%eax,%eax,4),%esi
mov    0x10ede4,%eax
shl    $0x5,%esi
sub    $0x4,%esp
lea    (%eax,%esi,1),%edx
sub    %esi,%ebx
push   %ebx
push   %edx
push   %eax
call   1056a0 <memmove>
add    $0xc,%esp
add    0x10ede4,%ebx
push   %esi
push   $0x0
push   %ebx
call   105710 <memset>
subl   $0x1,0x10edf0
add    $0x10,%esp
lea    -0x8(%ebp),%esp
pop    %ebx
pop    %esi
pop    %ebp
ret    
lea    0x0(%esi,%eiz,1),%esi
nop
mov    0x10edf0,%eax
mov    0x10edec,%edx
test   %eax,%eax
jne    103340 <_ZN8Terminal9char_backEv+0x40>
test   %edx,%edx
je     103350 <_ZN8Terminal9char_backEv+0x50>
lea    (%eax,%eax,4),%eax
sub    $0x1,%edx
mov    0x10ede4,%ecx
shl    $0x4,%eax
mov    %edx,0x10edec
add    %eax,%edx
movzbl 0x10ede8,%eax
shl    $0x8,%eax
or     $0x20,%eax
mov    %ax,(%ecx,%edx,2)
ret    
lea    0x0(%esi,%eiz,1),%esi
test   %edx,%edx
jne    103313 <_ZN8Terminal9char_backEv+0x13>
sub    $0x1,%eax
mov    %eax,0x10edf0
ret    
lea    0x0(%esi),%esi
ret    
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
nop
movl   $0x0,0x10edf0
mov    $0xb80a0,%edx
movl   $0x0,0x10edec
movb   $0x7,0x10ede8
movl   $0xb8000,0x10ede4
lea    0x0(%esi),%esi
lea    -0xa0(%edx),%eax
mov    $0x720,%ecx
add    $0x2,%eax
mov    %cx,-0x2(%eax)
cmp    %edx,%eax
jne    103396 <_ZN8Terminal5resetEv+0x36>
lea    0xa0(%eax),%edx
cmp    $0xb8fa0,%eax
jne    103390 <_ZN8Terminal5resetEv+0x30>
ret    
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
mov    %esp,%ebp
mov    0x8(%ebp),%eax
pop    %ebp
mov    (%eax),%eax
ret    
lea    0x0(%esi),%esi
push   %ebp
mov    %esp,%ebp
mov    0x8(%ebp),%eax
pop    %ebp
movzwl (%eax),%eax
ret    
lea    0x0(%esi,%eiz,1),%esi
nop
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
sub    $0xc,%esp
mov    0x8(%ebp),%esi
mov    0xc(%ebp),%edi
mov    0x10(%esi),%eax
test   %eax,%eax
je     103428 <_ZN3ELF18find_section_indexEPNS_17ELFLoadingContextEPKc+0x48>
xor    %ebx,%ebx
jmp    103408 <_ZN3ELF18find_section_indexEPNS_17ELFLoadingContextEPKc+0x28>
lea    0x0(%esi),%esi
add    $0x1,%ebx
cmp    %ebx,0x10(%esi)
jbe    103428 <_ZN3ELF18find_section_indexEPNS_17ELFLoadingContextEPKc+0x48>
mov    0x14(%esi),%eax
sub    $0x8,%esp
push   %edi
pushl  (%eax,%ebx,4)
call   105760 <strcmp>
add    $0x10,%esp
test   %eax,%eax
jne    103400 <_ZN3ELF18find_section_indexEPNS_17ELFLoadingContextEPKc+0x20>
lea    -0xc(%ebp),%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret    
sub    $0x4,%esp
push   $0x107c81
push   $0x14
push   $0x107c90
call   105ad0 <_Z16__assertion_failPKcjS0_>
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
sub    $0x2c,%esp
cmpl   $0x34,0xc(%ebp)
jbe    1036d0 <_ZN3ELF18load_static_sourceEPhjPN12MultiProcess7ProcessE+0x290>
sub    $0x4,%esp
push   $0x4
push   $0x10673c
pushl  0x8(%ebp)
call   105600 <memcmp>
add    $0x10,%esp
test   %eax,%eax
jne    103676 <_ZN3ELF18load_static_sourceEPhjPN12MultiProcess7ProcessE+0x236>
mov    0x8(%ebp),%eax
cmpb   $0x1,0x4(%eax)
jne    1036be <_ZN3ELF18load_static_sourceEPhjPN12MultiProcess7ProcessE+0x27e>
mov    0x8(%ebp),%eax
cmpb   $0x1,0x5(%eax)
jne    1036ac <_ZN3ELF18load_static_sourceEPhjPN12MultiProcess7ProcessE+0x26c>
mov    0x8(%ebp),%eax
cmpb   $0x1,0x6(%eax)
jne    1036e2 <_ZN3ELF18load_static_sourceEPhjPN12MultiProcess7ProcessE+0x2a2>
mov    0x8(%ebp),%eax
cmpb   $0x3,0x12(%eax)
jne    103688 <_ZN3ELF18load_static_sourceEPhjPN12MultiProcess7ProcessE+0x248>
mov    0x8(%ebp),%eax
sub    $0x4,%esp
push   $0x4
add    $0x14,%eax
push   $0x106738
push   %eax
call   105600 <memcmp>
add    $0x10,%esp
mov    %eax,%edx
test   %eax,%eax
jne    103706 <_ZN3ELF18load_static_sourceEPhjPN12MultiProcess7ProcessE+0x2c6>
mov    0x8(%ebp),%eax
cmpb   $0x2,0x10(%eax)
jne    10369a <_ZN3ELF18load_static_sourceEPhjPN12MultiProcess7ProcessE+0x25a>
mov    0x10(%ebp),%edi
test   %edi,%edi
je     10362c <_ZN3ELF18load_static_sourceEPhjPN12MultiProcess7ProcessE+0x1ec>
sub    $0xc,%esp
mov    %edx,-0x1c(%ebp)
push   $0x1
push   $0x1
push   $0x800000
push   $0x0
pushl  0x3c(%edi)
call   1021f0 <_ZN16MemoryManagement19identity_map_regionEPNS_13PageDirectoryEjmbb>
add    $0x1c,%esp
push   $0x0
push   $0x0
push   $0x20
call   101db0 <_Z7kmallocjiPj>
mov    0x8(%ebp),%eax
add    $0x10,%esp
mov    -0x1c(%ebp),%edx
mov    0x18(%eax),%eax
mov    %eax,-0x30(%ebp)
mov    0x8(%ebp),%eax
cmpw   $0x20,0x2a(%eax)
jne    1036f4 <_ZN3ELF18load_static_sourceEPhjPN12MultiProcess7ProcessE+0x2b4>
mov    0x8(%ebp),%ecx
mov    0x8(%ebp),%eax
mov    0x1c(%ecx),%ebx
movzwl 0x2c(%eax),%eax
add    %ecx,%ebx
movzwl %ax,%ecx
mov    %ecx,-0x2c(%ebp)
test   %ax,%ax
je     1035e0 <_ZN3ELF18load_static_sourceEPhjPN12MultiProcess7ProcessE+0x1a0>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
nop
mov    0x14(%ebx),%ecx
mov    0x4(%ebx),%eax
mov    0x10(%ebx),%esi
mov    %ecx,-0x20(%ebp)
mov    0x18(%ebx),%ecx
mov    %eax,-0x1c(%ebp)
mov    0x8(%ebx),%eax
mov    %ecx,-0x24(%ebp)
lea    0x10(%ebp),%ecx
cmp    $0x7fffff,%ecx
ja     10364e <_ZN3ELF18load_static_sourceEPhjPN12MultiProcess7ProcessE+0x20e>
cmp    $0x7fffff,%eax
jbe    103662 <_ZN3ELF18load_static_sourceEPhjPN12MultiProcess7ProcessE+0x222>
sub    $0xc,%esp
mov    %edx,-0x28(%ebp)
push   $0x1
push   $0x0
pushl  -0x20(%ebp)
push   %eax
pushl  0x3c(%edi)
mov    %eax,-0x20(%ebp)
call   102280 <_ZN16MemoryManagement15allocate_regionEPNS_13PageDirectoryEjjbb>
add    $0x14,%esp
pushl  0x3c(%edi)
call   102270 <_ZN16MemoryManagement13load_page_dirEPNS_13PageDirectoryE>
add    $0xc,%esp
mov    -0x20(%ebp),%eax
push   %esi
mov    -0x1c(%ebp),%esi
add    0x8(%ebp),%esi
push   %esi
push   %eax
call   105660 <memcpy>
add    $0x10,%esp
call   102250 <_ZN16MemoryManagement20save_kernel_page_dirEv>
testb  $0x1,-0x24(%ebp)
mov    -0x28(%ebp),%edx
je     1035d1 <_ZN3ELF18load_static_sourceEPhjPN12MultiProcess7ProcessE+0x191>
mov    -0x30(%ebp),%eax
mov    %eax,0x1c(%edi)
add    $0x1,%edx
add    $0x20,%ebx
cmp    -0x2c(%ebp),%edx
jne    103550 <_ZN3ELF18load_static_sourceEPhjPN12MultiProcess7ProcessE+0x110>
sub    $0xc,%esp
push   $0x1
push   $0x0
push   $0x4000
push   $0xc0000000
pushl  0x3c(%edi)
call   102280 <_ZN16MemoryManagement15allocate_regionEPNS_13PageDirectoryEjjbb>
movl   $0xc0000000,(%edi)
add    $0x14,%esp
movl   $0xc0003ffc,0x28(%edi)
pushl  0x3c(%edi)
call   102270 <_ZN16MemoryManagement13load_page_dirEPNS_13PageDirectoryE>
mov    0x28(%edi),%eax
add    $0x10,%esp
movl   $0x102a50,(%eax)
call   102250 <_ZN16MemoryManagement20save_kernel_page_dirEv>
lea    -0xc(%ebp),%esp
mov    %edi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret    
sub    $0x8,%esp
mov    %edx,-0x1c(%ebp)
push   $0x107cac
push   $0x0
call   102790 <_ZN12MultiProcess6createEPvPKc>
mov    -0x1c(%ebp),%edx
add    $0x10,%esp
mov    %eax,0x10(%ebp)
mov    %eax,%edi
jmp    1034df <_ZN3ELF18load_static_sourceEPhjPN12MultiProcess7ProcessE+0x9f>
sub    $0x4,%esp
push   $0x107c81
push   $0x3a
push   $0x108288
call   105ad0 <_Z16__assertion_failPKcjS0_>
sub    $0x4,%esp
push   $0x107c81
push   $0x3b
push   $0x1082b4
call   105ad0 <_Z16__assertion_failPKcjS0_>
push   %eax
push   $0x107c81
push   $0x1b
push   $0x1080c4
call   105ad0 <_Z16__assertion_failPKcjS0_>
push   %ebx
push   $0x107c81
push   $0x1f
push   $0x108198
call   105ad0 <_Z16__assertion_failPKcjS0_>
push   %edx
push   $0x107c81
push   $0x21
push   $0x108214
call   105ad0 <_Z16__assertion_failPKcjS0_>
push   %edi
push   $0x107c81
push   $0x1d
push   $0x108130
call   105ad0 <_Z16__assertion_failPKcjS0_>
push   %eax
push   $0x107c81
push   $0x1c
push   $0x108100
call   105ad0 <_Z16__assertion_failPKcjS0_>
push   %eax
push   $0x107c81
push   $0x18
push   $0x108098
call   105ad0 <_Z16__assertion_failPKcjS0_>
push   %esi
push   $0x107c81
push   $0x1e
push   $0x108168
call   105ad0 <_Z16__assertion_failPKcjS0_>
push   %eax
push   $0x107c81
push   $0x2c
push   $0x108240
call   105ad0 <_Z16__assertion_failPKcjS0_>
push   %ecx
push   $0x107c81
push   $0x20
push   $0x1081d4
call   105ad0 <_Z16__assertion_failPKcjS0_>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
mov    %esp,%ebp
sub    $0x8,%esp
mov    0x8(%ebp),%eax
cmp    %eax,0x109004
je     103749 <_Z19ensure_open_archivei+0x29>
sub    $0x4,%esp
mov    %eax,0x109004
push   $0x10ee00
push   $0x1
push   %eax
call   102e90 <_ZN4Disk12read_sectorsEjtPh>
add    $0x10,%esp
leave  
ret    
lea    0x0(%esi,%eiz,1),%esi
nop
push   %ebp
mov    %esp,%ebp
push   %ebx
mov    0xc(%ebp),%ebx
mov    0x8(%ebp),%eax
test   %ebx,%ebx
jle    103790 <_Z7oct2binPhi+0x40>
add    %eax,%ebx
xor    %edx,%edx
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
movzbl (%eax),%ecx
add    $0x1,%eax
lea    -0x30(%ecx,%edx,8),%edx
cmp    %ebx,%eax
jne    103770 <_Z7oct2binPhi+0x20>
mov    -0x4(%ebp),%ebx
mov    %edx,%eax
leave  
ret    
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
xor    %edx,%edx
mov    -0x4(%ebp),%ebx
leave  
mov    %edx,%eax
ret    
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
xor    %ebx,%ebx
sub    $0x1c,%esp
mov    0x8(%ebp),%esi
xchg   %ax,%ax
lea    0x101(%ebx),%edi
mov    0x109004,%eax
mov    %edi,%edx
shr    $0x9,%edx
cmp    %eax,%edx
je     1037e2 <_ZN5USTAR18lookup_raw_pointerEPKc+0x42>
sub    $0x4,%esp
mov    %edx,0x109004
push   $0x10ee00
push   $0x1
push   %edx
call   102e90 <_ZN4Disk12read_sectorsEjtPh>
mov    0x109004,%eax
add    $0x10,%esp
shl    $0x9,%eax
sub    $0x4,%esp
sub    %eax,%edi
push   $0x5
add    $0x10ee00,%edi
push   $0x107cc1
push   %edi
call   105600 <memcmp>
add    $0x10,%esp
mov    %eax,%edi
test   %eax,%eax
jne    1038df <_ZN5USTAR18lookup_raw_pointerEPKc+0x13f>
lea    0x7c(%ebx),%edx
mov    0x109004,%eax
mov    %edx,%ecx
shr    $0x9,%ecx
cmp    %eax,%ecx
je     10383f <_ZN5USTAR18lookup_raw_pointerEPKc+0x9f>
sub    $0x4,%esp
mov    %edx,-0x1c(%ebp)
push   $0x10ee00
push   $0x1
push   %ecx
mov    %ecx,0x109004
call   102e90 <_ZN4Disk12read_sectorsEjtPh>
mov    0x109004,%eax
mov    -0x1c(%ebp),%edx
add    $0x10,%esp
shl    $0x9,%eax
sub    %eax,%edx
lea    0x10ee00(%edx),%eax
lea    0x10ee0b(%edx),%ecx
movzbl (%eax),%edx
add    $0x1,%eax
lea    -0x30(%edx,%edi,8),%edi
cmp    %ecx,%eax
jne    103850 <_ZN5USTAR18lookup_raw_pointerEPKc+0xb0>
sub    $0xc,%esp
push   %esi
call   105740 <strlen>
mov    %ebx,%ecx
add    $0x10,%esp
lea    0x1(%eax),%edx
mov    0x109004,%eax
shr    $0x9,%ecx
cmp    %eax,%ecx
je     10389f <_ZN5USTAR18lookup_raw_pointerEPKc+0xff>
sub    $0x4,%esp
mov    %edx,-0x1c(%ebp)
push   $0x10ee00
push   $0x1
push   %ecx
mov    %ecx,0x109004
call   102e90 <_ZN4Disk12read_sectorsEjtPh>
mov    0x109004,%eax
mov    -0x1c(%ebp),%edx
add    $0x10,%esp
sub    $0x4,%esp
shl    $0x9,%eax
push   %edx
mov    %ebx,%edx
sub    %eax,%edx
push   %esi
lea    0x10ee00(%edx),%eax
push   %eax
call   105600 <memcmp>
add    $0x10,%esp
test   %eax,%eax
je     1038e1 <_ZN5USTAR18lookup_raw_pointerEPKc+0x141>
lea    0x3fe(%edi),%eax
add    $0x1ff,%edi
cmovs  %eax,%edi
and    $0xfffffe00,%edi
lea    0x200(%ebx,%edi,1),%ebx
jmp    1037b0 <_ZN5USTAR18lookup_raw_pointerEPKc+0x10>
xor    %ebx,%ebx
lea    -0xc(%ebp),%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret    
lea    0x0(%esi,%eiz,1),%esi
nop
push   %ebp
mov    %esp,%ebp
push   %ebx
sub    $0x10,%esp
pushl  0x8(%ebp)
call   1037a0 <_ZN5USTAR18lookup_raw_pointerEPKc>
add    $0x10,%esp
mov    %eax,%edx
mov    %eax,%ebx
mov    0x109004,%eax
shr    $0x9,%edx
cmp    %eax,%edx
je     103930 <_ZN5USTAR10lookup_rawEPKc+0x40>
sub    $0x4,%esp
mov    %edx,0x109004
push   $0x10ee00
push   $0x1
push   %edx
call   102e90 <_ZN4Disk12read_sectorsEjtPh>
mov    0x109004,%eax
add    $0x10,%esp
shl    $0x9,%eax
sub    %eax,%ebx
lea    0x10ee00(%ebx),%eax
mov    -0x4(%ebp),%ebx
leave  
ret    
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
sub    $0x28,%esp
pushl  0x8(%ebp)
call   1037a0 <_ZN5USTAR18lookup_raw_pointerEPKc>
movl   $0x0,-0x1c(%ebp)
add    $0x10,%esp
test   %eax,%eax
je     103aab <_ZN5USTAR13lookup_parsedEPKc+0x16b>
mov    %eax,%edx
mov    %eax,%esi
mov    0x109004,%eax
shr    $0x9,%edx
cmp    %eax,%edx
je     103991 <_ZN5USTAR13lookup_parsedEPKc+0x51>
sub    $0x4,%esp
mov    %edx,0x109004
push   $0x10ee00
push   $0x1
push   %edx
call   102e90 <_ZN4Disk12read_sectorsEjtPh>
mov    0x109004,%eax
add    $0x10,%esp
sub    $0x4,%esp
shl    $0x9,%eax
mov    %esi,%ebx
push   $0x0
sub    %eax,%ebx
push   $0x0
add    $0x10ee00,%ebx
push   $0xc
call   101db0 <_Z7kmallocjiPj>
mov    %ebx,(%esp)
mov    %eax,-0x1c(%ebp)
call   105740 <strlen>
add    $0xc,%esp
lea    0x1(%eax),%edi
push   $0x0
push   $0x0
push   %edi
call   101db0 <_Z7kmallocjiPj>
mov    -0x1c(%ebp),%edx
add    $0xc,%esp
mov    %eax,(%edx)
push   %edi
push   %ebx
push   %eax
call   105660 <memcpy>
lea    0x7c(%ebx),%eax
add    $0x10,%esp
xor    %edx,%edx
add    $0x87,%ebx
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
movzbl (%eax),%ecx
add    $0x1,%eax
lea    -0x30(%ecx,%edx,8),%edx
cmp    %ebx,%eax
jne    1039f0 <_ZN5USTAR13lookup_parsedEPKc+0xb0>
mov    -0x1c(%ebp),%edi
sub    $0x4,%esp
mov    %edx,0x4(%edi)
add    $0x1,%edx
push   $0x0
push   $0x0
push   %edx
call   101db0 <_Z7kmallocjiPj>
mov    0x4(%edi),%ebx
lea    0x200(%esi),%edx
add    $0x10,%esp
mov    %eax,0x8(%edi)
mov    %edx,-0x20(%ebp)
test   %ebx,%ebx
je     103aa8 <_ZN5USTAR13lookup_parsedEPKc+0x168>
xor    %edi,%edi
lea    0x0(%esi,%eiz,1),%esi
sub    %edi,%ebx
mov    $0x200,%eax
cmp    $0x200,%ebx
cmova  %eax,%ebx
mov    -0x20(%ebp),%eax
lea    (%edi,%eax,1),%esi
mov    0x109004,%eax
mov    %esi,%ecx
shr    $0x9,%ecx
cmp    %eax,%ecx
je     103a72 <_ZN5USTAR13lookup_parsedEPKc+0x132>
sub    $0x4,%esp
mov    %ecx,0x109004
push   $0x10ee00
push   $0x1
push   %ecx
call   102e90 <_ZN4Disk12read_sectorsEjtPh>
mov    0x109004,%eax
add    $0x10,%esp
shl    $0x9,%eax
sub    $0x4,%esp
sub    %eax,%esi
push   %ebx
add    $0x10ee00,%esi
push   %esi
mov    -0x1c(%ebp),%esi
mov    0x8(%esi),%eax
add    %edi,%eax
add    $0x200,%edi
push   %eax
call   105660 <memcpy>
mov    0x4(%esi),%ebx
add    $0x10,%esp
cmp    %edi,%ebx
ja     103a30 <_ZN5USTAR13lookup_parsedEPKc+0xf0>
mov    -0x1c(%ebp),%edx
mov    0x8(%edx),%eax
add    %ebx,%eax
movb   $0x0,(%eax)
mov    -0x1c(%ebp),%eax
lea    -0xc(%ebp),%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret    
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
mov    %esp,%ebp
sub    $0x14,%esp
push   $0x3fd
call   103c20 <inb>
leave  
and    $0x1,%eax
ret    
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
mov    %esp,%ebp
sub    $0x8,%esp
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi),%esi
sub    $0xc,%esp
push   $0x3fd
call   103c20 <inb>
add    $0x10,%esp
test   $0x1,%al
je     103af0 <read_serial+0x10>
sub    $0xc,%esp
push   $0x3f8
call   103c20 <inb>
leave  
ret    
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi),%esi
push   %ebp
mov    %esp,%ebp
sub    $0x14,%esp
push   $0x3fd
call   103c20 <inb>
leave  
and    $0x20,%eax
ret    
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
mov    %esp,%ebp
sub    $0x10,%esp
movb   $0x1,0x10f000
push   $0x0
push   $0x3f9
call   103c30 <outb>
pop    %eax
pop    %edx
push   $0x80
push   $0x3fb
call   103c30 <outb>
pop    %ecx
pop    %eax
push   $0x3
push   $0x3f8
call   103c30 <outb>
pop    %eax
pop    %edx
push   $0x0
push   $0x3f9
call   103c30 <outb>
pop    %ecx
pop    %eax
push   $0x3
push   $0x3fb
call   103c30 <outb>
pop    %eax
pop    %edx
push   $0xc7
push   $0x3fa
call   103c30 <outb>
pop    %ecx
pop    %eax
push   $0xb
push   $0x3fc
call   103c30 <outb>
add    $0x10,%esp
leave  
ret    
lea    0x0(%esi,%eiz,1),%esi
nop
push   %ebp
mov    %esp,%ebp
push   %ebx
sub    $0x4,%esp
cmpb   $0x0,0x10f000
mov    0x8(%ebp),%ebx
je     103c10 <debug_putchar+0x50>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi),%esi
sub    $0xc,%esp
push   $0x3fd
call   103c20 <inb>
add    $0x10,%esp
test   $0x20,%al
je     103be0 <debug_putchar+0x20>
sub    $0x8,%esp
movzbl %bl,%ebx
push   %ebx
push   $0x3f8
call   103c30 <outb>
mov    -0x4(%ebp),%ebx
add    $0x10,%esp
leave  
ret    
lea    0x0(%esi),%esi
call   103b40 <init_serial>
jmp    103be0 <debug_putchar+0x20>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
mov    %esp,%ebp
mov    0x8(%ebp),%edx
in     (%dx),%al
pop    %ebp
ret    
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
mov    %esp,%ebp
mov    0x8(%ebp),%edx
mov    0xc(%ebp),%eax
out    %al,(%dx)
pop    %ebp
ret    
lea    0x0(%esi,%eiz,1),%esi
xor    %eax,%eax
out    %al,$0x80
ret    
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
mov    %esp,%ebp
mov    0x8(%ebp),%edx
pop    %ebp
in     (%dx),%ax
ret    
lea    0x0(%esi),%esi
push   %ebp
mov    %esp,%ebp
mov    0x8(%ebp),%edx
mov    0xc(%ebp),%eax
out    %ax,(%dx)
pop    %ebp
ret    
xchg   %ax,%ax
nop
push   %ebp
mov    %esp,%ebp
mov    0xc(%ebp),%edx
mov    0x14(%ebp),%eax
cmp    0x18(%ebp),%eax
jae    103c84 <_out_buffer+0x14>
mov    0x10(%ebp),%ecx
mov    %dl,(%ecx,%eax,1)
pop    %ebp
ret    
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi),%esi
ret    
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
nop
push   %ebp
mov    %esp,%ebp
mov    0xc(%ebp),%eax
mov    0x8(%ebp),%edx
test   %al,%al
je     103cc0 <_out_char+0x20>
movsbl %al,%eax
mov    %eax,0x8(%ebp)
pop    %ebp
jmp    *%edx
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi),%esi
pop    %ebp
ret    
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
mov    %ecx,%esi
push   %ebx
sub    $0x1c,%esp
mov    %eax,-0x1c(%ebp)
mov    0x8(%ebp),%ebx
mov    %edx,-0x20(%ebp)
testb  $0x3,0x1c(%ebp)
jne    103d1e <_out_rev+0x4e>
mov    0x18(%ebp),%eax
cmp    %eax,0x14(%ebp)
jae    103d1e <_out_rev+0x4e>
mov    0x8(%ebp),%edi
mov    %eax,%ebx
sub    0x14(%ebp),%ebx
add    0x8(%ebp),%ebx
lea    0x0(%esi),%esi
sub    $0xc,%esp
mov    %edi,%edx
pushl  0xc(%ebp)
add    $0x1,%edi
mov    -0x20(%ebp),%eax
push   %edx
push   %esi
push   $0x20
pushl  -0x1c(%ebp)
call   *%eax
add    $0x20,%esp
cmp    %edi,%ebx
jne    103d00 <_out_rev+0x30>
mov    0x14(%ebp),%eax
test   %eax,%eax
je     103d5c <_out_rev+0x8c>
mov    0x14(%ebp),%edi
add    %edi,%ebx
lea    0x0(%esi),%esi
mov    0x10(%ebp),%eax
mov    %ebx,%edx
sub    $0xc,%esp
pushl  0xc(%ebp)
sub    %edi,%edx
sub    $0x1,%edi
mov    %ebx,-0x24(%ebp)
push   %edx
push   %esi
movsbl (%eax,%edi,1),%edx
mov    -0x20(%ebp),%eax
push   %edx
pushl  -0x1c(%ebp)
call   *%eax
add    $0x20,%esp
test   %edi,%edi
jne    103d30 <_out_rev+0x60>
mov    -0x24(%ebp),%ebx
testb  $0x2,0x1c(%ebp)
je     103da4 <_out_rev+0xd4>
mov    %ebx,%edi
sub    0x8(%ebp),%edi
cmp    %edi,0x18(%ebp)
jbe    103da4 <_out_rev+0xd4>
mov    %esi,%eax
mov    %ebx,%esi
mov    %edi,%ebx
mov    %eax,%edi
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
nop
sub    $0xc,%esp
mov    %esi,%ecx
pushl  0xc(%ebp)
mov    -0x20(%ebp),%eax
push   %ecx
add    $0x1,%esi
add    $0x1,%ebx
push   %edi
push   $0x20
pushl  -0x1c(%ebp)
call   *%eax
add    $0x20,%esp
cmp    %ebx,0x18(%ebp)
ja     103d80 <_out_rev+0xb0>
mov    %esi,%ebx
lea    -0xc(%ebp),%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret    
xchg   %ax,%ax
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    0x1c(%ebp),%esi
mov    0x28(%ebp),%edi
mov    %eax,-0x24(%ebp)
mov    0x8(%ebp),%eax
mov    %edx,-0x28(%ebp)
mov    %esi,-0x3c(%ebp)
mov    0x18(%ebp),%edx
mov    %eax,-0x30(%ebp)
mov    0xc(%ebp),%eax
mov    0x20(%ebp),%esi
mov    %ecx,-0x2c(%ebp)
mov    %eax,-0x34(%ebp)
mov    0x10(%ebp),%eax
mov    %edx,-0x40(%ebp)
mov    0x24(%ebp),%ecx
mov    %eax,-0x1c(%ebp)
mov    0x14(%ebp),%eax
mov    %esi,-0x20(%ebp)
test   $0x2,%edi
jne    103e87 <_ntoa_format+0xd7>
mov    %edi,%esi
and    $0x1,%esi
cmp    $0x1f,%eax
setbe  -0x35(%ebp)
cmp    -0x20(%ebp),%eax
setb   %bl
mov    %esi,-0x44(%ebp)
mov    %ebx,%esi
movzbl -0x35(%ebp),%ebx
and    %ebx,%esi
test   %ecx,%ecx
jne    103f50 <_ntoa_format+0x1a0>
mov    %esi,%ebx
test   %bl,%bl
je     103e47 <_ntoa_format+0x97>
mov    -0x1c(%ebp),%edx
mov    -0x20(%ebp),%ebx
lea    0x0(%esi,%eiz,1),%esi
add    $0x1,%eax
movb   $0x30,-0x1(%edx,%eax,1)
cmp    %eax,%ebx
jbe    103e41 <_ntoa_format+0x91>
cmp    $0x1f,%eax
jbe    103e30 <_ntoa_format+0x80>
mov    %edx,-0x1c(%ebp)
mov    %ebx,-0x20(%ebp)
mov    -0x44(%ebp),%edx
test   %edx,%edx
je     103e87 <_ntoa_format+0xd7>
cmp    $0x1f,%eax
setbe  -0x35(%ebp)
cmp    %eax,%ecx
jbe    103e87 <_ntoa_format+0xd7>
cmpb   $0x0,-0x35(%ebp)
je     103e87 <_ntoa_format+0xd7>
mov    -0x1c(%ebp),%edx
mov    -0x20(%ebp),%ebx
jmp    103e75 <_ntoa_format+0xc5>
lea    0x0(%esi,%eiz,1),%esi
xchg   %ax,%ax
cmp    $0x1f,%eax
ja     103e81 <_ntoa_format+0xd1>
add    $0x1,%eax
movb   $0x30,-0x1(%edx,%eax,1)
cmp    %ecx,%eax
jb     103e70 <_ntoa_format+0xc0>
mov    %edx,-0x1c(%ebp)
mov    %ebx,-0x20(%ebp)
test   $0x10,%edi
je     103f34 <_ntoa_format+0x184>
test   $0x400,%edi
je     103f00 <_ntoa_format+0x150>
cmp    $0x1f,%eax
setbe  %bl
cmpl   $0x10,-0x3c(%ebp)
mov    %ebx,%esi
je     104000 <_ntoa_format+0x250>
cmpl   $0x2,-0x3c(%ebp)
jne    103ec3 <_ntoa_format+0x113>
test   %bl,%bl
je     103ec3 <_ntoa_format+0x113>
mov    -0x1c(%ebp),%esi
lea    (%esi,%eax,1),%ebx
add    $0x1,%eax
movb   $0x62,(%ebx)
cmp    $0x20,%eax
jne    103f28 <_ntoa_format+0x178>
mov    %eax,0x14(%ebp)
mov    -0x1c(%ebp),%eax
mov    %edi,0x1c(%ebp)
mov    -0x28(%ebp),%edx
mov    %eax,0x10(%ebp)
mov    -0x34(%ebp),%eax
mov    %ecx,0x18(%ebp)
mov    -0x2c(%ebp),%ecx
mov    %eax,0xc(%ebp)
mov    -0x30(%ebp),%eax
mov    %eax,0x8(%ebp)
mov    -0x24(%ebp),%eax
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    103cd0 <_out_rev>
lea    0x0(%esi,%eiz,1),%esi
nop
test   %eax,%eax
jne    103fd0 <_ntoa_format+0x220>
mov    -0x3c(%ebp),%esi
cmp    $0x10,%esi
je     104047 <_ntoa_format+0x297>
mov    -0x1c(%ebp),%eax
cmp    $0x2,%esi
jne    10404e <_ntoa_format+0x29e>
movb   $0x62,(%eax)
mov    $0x1,%eax
mov    -0x1c(%ebp),%esi
lea    (%esi,%eax,1),%ebx
add    $0x1,%eax
movb   $0x30,(%ebx)
cmp    $0x20,%eax
je     103ec8 <_ntoa_format+0x118>
cmpb   $0x0,-0x40(%ebp)
je     103f80 <_ntoa_format+0x1d0>
mov    -0x1c(%ebp),%esi
movb   $0x2d,(%esi,%eax,1)
add    $0x1,%eax
jmp    103ec8 <_ntoa_format+0x118>
xchg   %ax,%ax
mov    -0x44(%ebp),%ebx
test   %ebx,%ebx
je     103fc0 <_ntoa_format+0x210>
test   %dl,%dl
jne    103f63 <_ntoa_format+0x1b3>
test   $0xc,%edi
je     103f66 <_ntoa_format+0x1b6>
sub    $0x1,%ecx
mov    %esi,%ebx
test   %bl,%bl
jne    103e26 <_ntoa_format+0x76>
jmp    103e55 <_ntoa_format+0xa5>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
test   $0x4,%edi
jne    103fb0 <_ntoa_format+0x200>
test   $0x8,%edi
je     103ec8 <_ntoa_format+0x118>
mov    -0x1c(%ebp),%esi
movb   $0x20,(%esi,%eax,1)
add    $0x1,%eax
jmp    103ec8 <_ntoa_format+0x118>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi),%esi
mov    -0x1c(%ebp),%esi
movb   $0x2b,(%esi,%eax,1)
add    $0x1,%eax
jmp    103ec8 <_ntoa_format+0x118>
nop
mov    %esi,%ebx
test   %bl,%bl
jne    103e26 <_ntoa_format+0x76>
jmp    103e87 <_ntoa_format+0xd7>
nop
cmp    -0x20(%ebp),%eax
je     103fdd <_ntoa_format+0x22d>
cmp    %ecx,%eax
jne    103e9b <_ntoa_format+0xeb>
mov    %eax,%esi
sub    $0x1,%esi
setne  %bl
mov    %esi,-0x20(%ebp)
cmpl   $0x10,-0x3c(%ebp)
mov    %ebx,%esi
sete   %bl
mov    %esi,%edx
and    %bl,%dl
mov    %edx,%esi
je     104030 <_ntoa_format+0x280>
sub    $0x2,%eax
lea    0x0(%esi,%eiz,1),%esi
mov    %edi,%ebx
and    $0x20,%ebx
mov    %ebx,%edx
jne    104017 <_ntoa_format+0x267>
mov    %esi,%ebx
test   %bl,%bl
jne    104038 <_ntoa_format+0x288>
test   %edx,%edx
je     103ec3 <_ntoa_format+0x113>
mov    %esi,%ebx
test   %bl,%bl
je     103ec3 <_ntoa_format+0x113>
mov    -0x1c(%ebp),%esi
movb   $0x58,(%esi,%eax,1)
add    $0x1,%eax
jmp    103ec3 <_ntoa_format+0x113>
mov    -0x20(%ebp),%eax
jmp    103e9b <_ntoa_format+0xeb>
mov    -0x1c(%ebp),%esi
movb   $0x78,(%esi,%eax,1)
add    $0x1,%eax
jmp    103ec3 <_ntoa_format+0x113>
mov    $0x1,%esi
jmp    104000 <_ntoa_format+0x250>
movb   $0x30,(%eax)
mov    $0x1,%eax
jmp    103f39 <_ntoa_format+0x189>
lea    0x0(%esi,%eiz,1),%esi
nop
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
sub    $0x4c,%esp
mov    %eax,-0x40(%ebp)
mov    0x10(%ebp),%ebx
mov    0x14(%ebp),%eax
mov    %edx,-0x44(%ebp)
mov    %ecx,-0x48(%ebp)
mov    %eax,-0x4c(%ebp)
test   %ebx,%ebx
jne    1040d0 <_ntoa_long+0x70>
mov    0x24(%ebp),%eax
and    $0xffffffef,%eax
testl  $0x400,0x24(%ebp)
mov    %eax,0x24(%ebp)
je     1040d0 <_ntoa_long+0x70>
xor    %ecx,%ecx
movzbl -0x4c(%ebp),%eax
sub    $0xc,%esp
mov    -0x44(%ebp),%edx
pushl  0x24(%ebp)
pushl  0x20(%ebp)
pushl  0x1c(%ebp)
pushl  0x18(%ebp)
push   %eax
lea    -0x38(%ebp),%eax
push   %ecx
mov    -0x48(%ebp),%ecx
push   %eax
mov    -0x40(%ebp),%eax
pushl  0xc(%ebp)
pushl  0x8(%ebp)
call   103db0 <_ntoa_format>
lea    -0xc(%ebp),%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret    
lea    0x0(%esi,%eiz,1),%esi
nop
mov    0x24(%ebp),%eax
and    $0x20,%eax
cmp    $0x1,%eax
sbb    %eax,%eax
xor    %ecx,%ecx
and    $0x20,%eax
add    $0x37,%eax
mov    %al,-0x39(%ebp)
jmp    1040f2 <_ntoa_long+0x92>
lea    0x0(%esi,%eiz,1),%esi
nop
mov    %eax,%ebx
xor    %edx,%edx
mov    %ebx,%eax
movzbl -0x39(%ebp),%esi
divl   0x18(%ebp)
add    %edx,%esi
lea    0x30(%edx),%edi
cmp    $0x9,%edx
cmova  %esi,%edi
add    $0x1,%ecx
mov    %edi,%edx
mov    %dl,-0x39(%ebp,%ecx,1)
cmp    0x18(%ebp),%ebx
jb     104093 <_ntoa_long+0x33>
cmp    $0x1f,%ecx
jbe    1040f0 <_ntoa_long+0x90>
jmp    104093 <_ntoa_long+0x33>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
nop
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
sub    $0x5c,%esp
mov    0x14(%ebp),%edi
mov    0x10(%ebp),%esi
mov    %eax,-0x58(%ebp)
mov    %edx,-0x5c(%ebp)
mov    0x18(%ebp),%eax
mov    0x20(%ebp),%edx
mov    %ecx,-0x60(%ebp)
mov    %eax,-0x64(%ebp)
mov    0x1c(%ebp),%eax
mov    %edx,-0x44(%ebp)
mov    %edi,%edx
or     %esi,%edx
mov    %eax,-0x48(%ebp)
jne    104180 <_ntoa_long_long+0x50>
mov    0x2c(%ebp),%eax
and    $0xffffffef,%eax
testl  $0x400,0x2c(%ebp)
mov    %eax,0x2c(%ebp)
je     104180 <_ntoa_long_long+0x50>
xor    %edi,%edi
jmp    1041ef <_ntoa_long_long+0xbf>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi),%esi
mov    0x2c(%ebp),%eax
and    $0x20,%eax
cmp    $0x1,%eax
sbb    %eax,%eax
xor    %ebx,%ebx
and    $0x20,%eax
add    $0x37,%eax
mov    %al,-0x51(%ebp)
jmp    1041ab <_ntoa_long_long+0x7b>
lea    0x0(%esi,%eiz,1),%esi
nop
cmp    $0x1f,%ebx
ja     1041ed <_ntoa_long_long+0xbd>
mov    -0x50(%ebp),%esi
mov    -0x4c(%ebp),%edi
sub    $0xc,%esp
lea    -0x40(%ebp),%eax
push   %eax
pushl  -0x44(%ebp)
pushl  -0x48(%ebp)
push   %edi
push   %esi
call   1057e0 <__udivmoddi4>
add    $0x20,%esp
mov    %eax,-0x50(%ebp)
movzbl -0x51(%ebp),%eax
mov    %edx,-0x4c(%ebp)
mov    -0x40(%ebp),%edx
add    %edx,%eax
lea    0x30(%edx),%ecx
cmp    $0x9,%dl
mov    -0x44(%ebp),%edx
cmovle %ecx,%eax
add    $0x1,%ebx
mov    %al,-0x39(%ebp,%ebx,1)
mov    -0x48(%ebp),%eax
cmp    %eax,%esi
sbb    %edx,%edi
jae    1041a0 <_ntoa_long_long+0x70>
mov    %ebx,%edi
movzbl -0x64(%ebp),%eax
sub    $0xc,%esp
mov    -0x60(%ebp),%ecx
pushl  0x2c(%ebp)
mov    -0x5c(%ebp),%edx
pushl  0x28(%ebp)
pushl  0x24(%ebp)
pushl  -0x48(%ebp)
push   %eax
lea    -0x38(%ebp),%eax
push   %edi
push   %eax
mov    -0x58(%ebp),%eax
pushl  0xc(%ebp)
pushl  0x8(%ebp)
call   103db0 <_ntoa_format>
lea    -0xc(%ebp),%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret    
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
nop
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
sub    $0x4c,%esp
fldl   0x10(%ebp)
mov    0x1c(%ebp),%edi
mov    %eax,-0x20(%ebp)
mov    0x8(%ebp),%eax
mov    0x20(%ebp),%ebx
mov    %edx,-0x2c(%ebp)
mov    %ecx,-0x30(%ebp)
mov    %eax,-0x3c(%ebp)
mov    0xc(%ebp),%eax
fucomi %st(0),%st
mov    %edi,-0x34(%ebp)
mov    %eax,-0x38(%ebp)
mov    0x18(%ebp),%eax
jp     104530 <_etoa+0x300>
fldl   0x1082f0
fxch   %st(1)
fcomi  %st(1),%st
fstp   %st(1)
ja     104530 <_etoa+0x300>
fldl   0x1082f8
fcomip %st(1),%st
ja     104530 <_etoa+0x300>
fnstcw -0x1a(%ebp)
fld    %st(0)
mov    %ebx,%esi
mov    $0x6,%edx
fchs   
fldz   
fcomip %st(2),%st
fcmovbe %st(1),%st
and    $0x400,%esi
cmove  %edx,%eax
mov    %esi,-0x40(%ebp)
fstpl  -0x28(%ebp)
mov    -0x24(%ebp),%edx
mov    -0x28(%ebp),%esi
mov    %edx,%ecx
and    $0xfffff,%edx
shr    $0x14,%ecx
or     $0x3ff00000,%edx
and    $0x7ff,%ecx
mov    %edx,-0x44(%ebp)
movzwl -0x1a(%ebp),%edx
sub    $0x3ff,%ecx
mov    %ecx,-0x48(%ebp)
fildl  -0x48(%ebp)
or     $0xc,%dh
fmull  0x108300
faddl  0x108308
mov    %esi,-0x48(%ebp)
fldl   -0x48(%ebp)
mov    %dx,-0x1c(%ebp)
fsubs  0x108338
fmull  0x108310
faddp  %st,%st(1)
fldcw  -0x1c(%ebp)
fistpl -0x48(%ebp)
fldcw  -0x1a(%ebp)
fildl  -0x48(%ebp)
fldl   0x108318
fmul   %st(1),%st
fadds  0x10833c
fldcw  -0x1c(%ebp)
fistpl -0x50(%ebp)
fldcw  -0x1a(%ebp)
fmull  0x108320
fildl  -0x50(%ebp)
fmull  0x108328
fsubrp %st,%st(1)
fld    %st(0)
fmul   %st(1),%st
fld    %st(1)
fadd   %st(2),%st
fld    %st(1)
fdivs  0x108340
flds   0x108344
fadd   %st,%st(1)
fxch   %st(1)
fdivr  %st(3),%st
fadds  0x108348
fdivrp %st,%st(3)
fxch   %st(3)
fsubrs 0x10834c
faddp  %st,%st(2)
fdivp  %st,%st(1)
fadds  0x108350
mov    -0x50(%ebp),%esi
add    $0x3ff,%esi
mov    %esi,%edi
mov    $0x0,%esi
shl    $0x14,%edi
mov    %esi,-0x50(%ebp)
mov    %edi,-0x4c(%ebp)
fmull  -0x50(%ebp)
fstl   -0x50(%ebp)
fldl   -0x28(%ebp)
fxch   %st(1)
fcomip %st(1),%st
fstp   %st(0)
ja     104560 <_etoa+0x330>
fstp   %st(0)
mov    -0x50(%ebp),%esi
mov    -0x4c(%ebp),%edi
mov    %esi,-0x58(%ebp)
mov    %edi,-0x54(%ebp)
mov    -0x48(%ebp),%edi
xor    %ecx,%ecx
lea    0x63(%edi),%edx
cmp    $0xc6,%edx
seta   %cl
mov    %ecx,%esi
add    $0x4,%esi
test   $0x8,%bh
je     104402 <_etoa+0x1d2>
fldl   0x108330
fldl   -0x28(%ebp)
mov    %eax,%edx
fcomi  %st(1),%st
fstp   %st(1)
jb     1043f0 <_etoa+0x1c0>
flds   0x108354
fcomip %st(1),%st
fstp   %st(0)
ja     1045a0 <_etoa+0x370>
jmp    1043f2 <_etoa+0x1c2>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi),%esi
fstp   %st(0)
cmpl   $0x1,-0x40(%ebp)
mov    %eax,%ecx
adc    $0xffffffff,%ecx
test   %eax,%eax
mov    %edx,%eax
cmovne %ecx,%eax
mov    -0x34(%ebp),%ecx
mov    %ebx,%edi
movb   $0x1,-0x50(%ebp)
and    $0x2,%edi
mov    %ecx,%edx
sub    %esi,%edx
cmp    %ecx,%esi
mov    $0x0,%ecx
cmovae %ecx,%edx
cmp    $0x1,%edi
sbb    %ecx,%ecx
add    $0x1,%ecx
test   %edi,%edi
mov    $0x0,%edi
mov    %cl,-0x40(%ebp)
mov    -0x48(%ebp),%ecx
cmovne %edi,%edx
test   %ecx,%ecx
je     104441 <_etoa+0x211>
fldl   -0x28(%ebp)
fdivl  -0x58(%ebp)
fstpl  -0x28(%ebp)
mov    %ebx,%ecx
fldz   
and    $0xf7,%ch
fcomip %st(1),%st
fstp   %st(0)
ja     104590 <_etoa+0x360>
sub    $0x4,%esp
push   %ecx
mov    -0x30(%ebp),%ecx
push   %edx
mov    -0x2c(%ebp),%edx
push   %eax
mov    -0x20(%ebp),%eax
pushl  -0x24(%ebp)
pushl  -0x28(%ebp)
pushl  -0x38(%ebp)
pushl  -0x3c(%ebp)
call   104610 <_ftoa>
add    $0x20,%esp
cmpb   $0x0,-0x50(%ebp)
mov    %eax,%edi
je     104524 <_etoa+0x2f4>
and    $0x20,%ebx
lea    0x1(%eax),%ecx
cmp    $0x1,%ebx
mov    %ecx,-0x28(%ebp)
mov    -0x2c(%ebp),%ebx
sbb    %edx,%edx
sub    $0xc,%esp
pushl  -0x38(%ebp)
sub    $0x1,%esi
and    $0x20,%edx
push   %eax
add    $0x45,%edx
pushl  -0x30(%ebp)
push   %edx
pushl  -0x20(%ebp)
call   *%ebx
mov    -0x48(%ebp),%edi
mov    -0x28(%ebp),%ecx
mov    -0x2c(%ebp),%edx
mov    %edi,%ebx
mov    %edi,%eax
add    $0x20,%esp
sar    $0x1f,%ebx
shr    $0x1f,%eax
push   $0x5
xor    %ebx,%edi
push   %esi
push   $0x0
push   $0xa
push   %eax
mov    %edi,%eax
sub    %ebx,%eax
push   %eax
mov    -0x20(%ebp),%eax
pushl  -0x38(%ebp)
push   %ecx
mov    -0x30(%ebp),%ecx
call   104060 <_ntoa_long>
add    $0x20,%esp
cmpb   $0x0,-0x40(%ebp)
mov    %eax,%edi
je     104524 <_etoa+0x2f4>
mov    %eax,%ebx
sub    -0x3c(%ebp),%ebx
cmp    %ebx,-0x34(%ebp)
jbe    104524 <_etoa+0x2f4>
mov    -0x38(%ebp),%edi
mov    %eax,%esi
lea    0x0(%esi,%eiz,1),%esi
sub    $0xc,%esp
mov    %esi,%ecx
mov    -0x2c(%ebp),%eax
add    $0x1,%esi
push   %edi
add    $0x1,%ebx
push   %ecx
pushl  -0x30(%ebp)
push   $0x20
pushl  -0x20(%ebp)
call   *%eax
add    $0x20,%esp
cmp    %ebx,-0x34(%ebp)
ja     104500 <_etoa+0x2d0>
mov    %esi,%edi
lea    -0xc(%ebp),%esp
mov    %edi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret    
xchg   %ax,%ax
mov    %ebx,0x20(%ebp)
mov    -0x34(%ebp),%ebx
mov    %eax,0x18(%ebp)
mov    %ebx,0x1c(%ebp)
fstpl  0x10(%ebp)
mov    -0x38(%ebp),%eax
mov    -0x30(%ebp),%ecx
mov    -0x2c(%ebp),%edx
mov    %eax,0xc(%ebp)
mov    -0x3c(%ebp),%eax
mov    %eax,0x8(%ebp)
mov    -0x20(%ebp),%eax
lea    -0xc(%ebp),%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    104610 <_ftoa>
fdivrl -0x50(%ebp)
subl   $0x1,-0x48(%ebp)
fstpl  -0x58(%ebp)
jmp    1043a5 <_etoa+0x175>
movb   $0x0,-0x40(%ebp)
mov    %esi,%ebx
xor    %edx,%edx
xor    %esi,%esi
movb   $0x0,-0x50(%ebp)
movl   $0x0,-0x48(%ebp)
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
nop
fldl   -0x28(%ebp)
fchs   
fstpl  -0x28(%ebp)
jmp    104452 <_etoa+0x222>
lea    0x0(%esi),%esi
sub    %edi,%edx
mov    %ebx,%esi
sub    $0x1,%edx
cmp    %edi,%eax
mov    -0x34(%ebp),%edi
mov    $0x0,%eax
cmovg  %edx,%eax
or     $0x400,%esi
test   %edi,%edi
jne    1045f0 <_etoa+0x3c0>
and    $0xf7,%bh
fldz   
mov    %ebx,%ecx
or     $0x4,%ch
fcomip %st(1),%st
fstp   %st(0)
ja     10456f <_etoa+0x33f>
fldl   -0x28(%ebp)
mov    %ecx,0x20(%ebp)
movl   $0x0,0x1c(%ebp)
mov    %eax,0x18(%ebp)
fstpl  0x10(%ebp)
jmp    10453f <_etoa+0x30f>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi),%esi
mov    %esi,%ebx
movl   $0x0,-0x48(%ebp)
mov    -0x34(%ebp),%edx
xor    %esi,%esi
movb   $0x0,-0x50(%ebp)
movb   $0x0,-0x40(%ebp)
jmp    104441 <_etoa+0x211>
lea    0x0(%esi,%eiz,1),%esi
nop
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
sub    $0x5c,%esp
fldl   0x10(%ebp)
mov    0x18(%ebp),%edi
mov    %eax,-0x48(%ebp)
mov    0x8(%ebp),%eax
mov    %edx,-0x4c(%ebp)
mov    %ecx,-0x50(%ebp)
mov    %eax,-0x54(%ebp)
mov    0xc(%ebp),%eax
fucomi %st(0),%st
mov    %eax,-0x58(%ebp)
mov    0x1c(%ebp),%eax
mov    %eax,-0x44(%ebp)
mov    0x20(%ebp),%eax
mov    %eax,-0x40(%ebp)
jp     104831 <_ftoa+0x221>
fldl   0x1082f8
fcomip %st(1),%st
ja     1048a0 <_ftoa+0x290>
fldl   0x1082f0
fxch   %st(1)
fcomi  %st(1),%st
fstp   %st(1)
ja     1047e0 <_ftoa+0x1d0>
flds   0x108358
fxch   %st(1)
fcomi  %st(1),%st
fstp   %st(1)
ja     104860 <_ftoa+0x250>
flds   0x10835c
fcomip %st(1),%st
ja     104860 <_ftoa+0x250>
fldz   
fcomi  %st(1),%st
ja     104850 <_ftoa+0x240>
fstp   %st(0)
movb   $0x0,-0x61(%ebp)
mov    -0x40(%ebp),%ecx
and    $0x400,%ecx
je     1049b0 <_ftoa+0x3a0>
xor    %ecx,%ecx
lea    -0x39(%ebp),%eax
cmp    $0x9,%edi
jbe    104abd <_ftoa+0x4ad>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
add    $0x1,%ecx
sub    $0x1,%edi
movb   $0x30,(%eax,%ecx,1)
cmp    $0x1f,%ecx
ja     1046d4 <_ftoa+0xc4>
cmp    $0x9,%edi
ja     1046c0 <_ftoa+0xb0>
flds   0x108358
fxch   %st(1)
fnstcw -0x3a(%ebp)
movzwl -0x3a(%ebp),%eax
or     $0xc,%ah
mov    %ax,-0x3c(%ebp)
fldcw  -0x3c(%ebp)
fistl  -0x60(%ebp)
fldcw  -0x3a(%ebp)
fildl  -0x60(%ebp)
mov    -0x60(%ebp),%esi
fsubr  %st(1),%st
fmul   %st(2),%st
fld    %st(0)
fldcw  -0x3c(%ebp)
fistpll -0x60(%ebp)
fldcw  -0x3a(%ebp)
movl   $0x0,-0x5c(%ebp)
fildll -0x60(%ebp)
mov    -0x60(%ebp),%ebx
fsubrp %st,%st(1)
flds   0x10833c
fxch   %st(1)
fcomi  %st(1),%st
jbe    104980 <_ftoa+0x370>
fstp   %st(0)
fstp   %st(0)
add    $0x1,%ebx
movl   $0x0,-0x5c(%ebp)
mov    %ebx,-0x60(%ebp)
fildll -0x60(%ebp)
fcomip %st(2),%st
fstp   %st(1)
jb     104746 <_ftoa+0x136>
add    $0x1,%esi
xor    %ebx,%ebx
test   %edi,%edi
je     1048d0 <_ftoa+0x2c0>
fstp   %st(0)
mov    %esi,-0x68(%ebp)
jmp    104791 <_ftoa+0x181>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
lea    -0x1(%edi),%eax
add    $0x1,%ecx
mov    %eax,-0x60(%ebp)
mov    $0xcccccccd,%eax
mul    %ebx
mov    %ebx,%eax
shr    $0x3,%edx
lea    (%edx,%edx,4),%esi
add    %esi,%esi
sub    %esi,%eax
add    $0x30,%eax
mov    %al,-0x39(%ebp,%ecx,1)
cmp    $0x9,%ebx
jbe    104a50 <_ftoa+0x440>
mov    -0x60(%ebp),%edi
mov    %edx,%ebx
cmp    $0x20,%ecx
jne    104760 <_ftoa+0x150>
mov    -0x40(%ebp),%eax
mov    $0x20,%ecx
and    $0x3,%eax
cmp    $0x1,%eax
je     1049d0 <_ftoa+0x3c0>
sub    $0x8,%esp
lea    -0x38(%ebp),%eax
pushl  -0x40(%ebp)
mov    -0x4c(%ebp),%edx
pushl  -0x44(%ebp)
push   %ecx
push   %eax
mov    -0x50(%ebp),%ecx
pushl  -0x58(%ebp)
mov    -0x48(%ebp),%eax
pushl  -0x54(%ebp)
call   103cd0 <_out_rev>
add    $0x20,%esp
lea    -0xc(%ebp),%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret    
lea    0x0(%esi,%eiz,1),%esi
xchg   %ax,%ax
fstp   %st(0)
mov    -0x40(%ebp),%ebx
mov    $0x107ccc,%ecx
mov    %ebx,%eax
mov    %ebx,0x1c(%ebp)
mov    -0x44(%ebp),%ebx
and    $0x4,%eax
cmp    $0x1,%eax
mov    %ebx,0x18(%ebp)
sbb    %edx,%edx
add    $0x4,%edx
test   %eax,%eax
mov    $0x107cc7,%eax
cmove  %ecx,%eax
mov    %edx,0x14(%ebp)
mov    %eax,0x10(%ebp)
mov    -0x58(%ebp),%eax
mov    -0x50(%ebp),%ecx
mov    -0x4c(%ebp),%edx
mov    %eax,0xc(%ebp)
mov    -0x54(%ebp),%eax
mov    %eax,0x8(%ebp)
mov    -0x48(%ebp),%eax
lea    -0xc(%ebp),%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    103cd0 <_out_rev>
fstp   %st(0)
mov    -0x40(%ebp),%eax
movl   $0x3,0x14(%ebp)
movl   $0x107cd0,0x10(%ebp)
mov    %eax,0x1c(%ebp)
mov    -0x44(%ebp),%eax
mov    %eax,0x18(%ebp)
jmp    104810 <_ftoa+0x200>
nop
fsubp  %st,%st(1)
movb   $0x1,-0x61(%ebp)
jmp    104698 <_ftoa+0x88>
lea    0x0(%esi,%eiz,1),%esi
nop
mov    -0x40(%ebp),%eax
mov    -0x50(%ebp),%ecx
mov    %edi,0x18(%ebp)
mov    -0x4c(%ebp),%edx
fstpl  0x10(%ebp)
mov    %eax,0x20(%ebp)
mov    -0x44(%ebp),%eax
mov    %eax,0x1c(%ebp)
mov    -0x58(%ebp),%eax
mov    %eax,0xc(%ebp)
mov    -0x54(%ebp),%eax
mov    %eax,0x8(%ebp)
mov    -0x48(%ebp),%eax
lea    -0xc(%ebp),%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    104230 <_etoa>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi),%esi
fstp   %st(0)
mov    -0x40(%ebp),%eax
movl   $0x4,0x14(%ebp)
movl   $0x107cd4,0x10(%ebp)
mov    %eax,0x1c(%ebp)
mov    -0x44(%ebp),%eax
mov    %eax,0x18(%ebp)
jmp    104810 <_ftoa+0x200>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
nop
mov    %esi,-0x60(%ebp)
fildl  -0x60(%ebp)
fsubrp %st,%st(1)
flds   0x10833c
fcomi  %st(1),%st
jbe    104960 <_ftoa+0x350>
fxch   %st(1)
fcomip %st(1),%st
fstp   %st(0)
ja     104964 <_ftoa+0x354>
lea    0x0(%esi),%esi
mov    $0x66666667,%ebx
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x20,%ecx
je     104796 <_ftoa+0x186>
mov    %esi,%eax
add    $0x1,%ecx
imul   %ebx
mov    %esi,%eax
sar    $0x1f,%eax
sar    $0x2,%edx
sub    %eax,%edx
lea    (%edx,%edx,4),%eax
add    %eax,%eax
sub    %eax,%esi
lea    0x30(%esi),%eax
mov    %edx,%esi
mov    %al,-0x39(%ebp,%ecx,1)
test   %edx,%edx
jne    104900 <_ftoa+0x2f0>
mov    -0x40(%ebp),%eax
and    $0x3,%eax
cmp    $0x1,%eax
je     1049d0 <_ftoa+0x3c0>
cmp    $0x20,%ecx
je     1047aa <_ftoa+0x19a>
cmpb   $0x0,-0x61(%ebp)
je     104a30 <_ftoa+0x420>
movb   $0x2d,-0x38(%ebp,%ecx,1)
add    $0x1,%ecx
jmp    1047aa <_ftoa+0x19a>
lea    0x0(%esi),%esi
fstp   %st(0)
fstp   %st(0)
mov    %esi,%eax
and    $0x1,%eax
cmp    $0x1,%eax
sbb    $0xffffffff,%esi
jmp    1048f0 <_ftoa+0x2e0>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
nop
fstp   %st(3)
fxch   %st(1)
fxch   %st(2)
fxch   %st(1)
fcomip %st(1),%st
fstp   %st(0)
ja     104746 <_ftoa+0x136>
test   %ebx,%ebx
jne    104aa0 <_ftoa+0x490>
add    $0x1,%ebx
jmp    104746 <_ftoa+0x136>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
flds   0x108354
fxch   %st(1)
mov    $0x6,%edi
jmp    1046dc <_ftoa+0xcc>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
mov    -0x44(%ebp),%eax
test   %eax,%eax
je     10493d <_ftoa+0x32d>
cmpb   $0x0,-0x61(%ebp)
jne    1049e7 <_ftoa+0x3d7>
testb  $0xc,-0x40(%ebp)
je     1049eb <_ftoa+0x3db>
subl   $0x1,-0x44(%ebp)
cmp    $0x1f,%ecx
ja     10493d <_ftoa+0x32d>
mov    -0x44(%ebp),%edx
lea    -0x39(%ebp),%eax
cmp    %ecx,-0x44(%ebp)
jbe    10493d <_ftoa+0x32d>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi),%esi
add    $0x1,%ecx
movb   $0x30,(%eax,%ecx,1)
cmp    %edx,%ecx
jae    10493d <_ftoa+0x32d>
cmp    $0x1f,%ecx
jbe    104a10 <_ftoa+0x400>
jmp    10493d <_ftoa+0x32d>
lea    0x0(%esi,%eiz,1),%esi
testb  $0x4,-0x40(%ebp)
jne    104ab0 <_ftoa+0x4a0>
testb  $0x8,-0x40(%ebp)
je     1047aa <_ftoa+0x19a>
movb   $0x20,-0x38(%ebp,%ecx,1)
add    $0x1,%ecx
jmp    1047aa <_ftoa+0x19a>
lea    0x0(%esi),%esi
mov    -0x68(%ebp),%esi
cmp    $0x20,%ecx
je     104796 <_ftoa+0x186>
mov    -0x60(%ebp),%edx
mov    %ecx,%eax
test   %edx,%edx
je     104a8b <_ftoa+0x47b>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
add    $0x1,%eax
movb   $0x30,-0x39(%ebp,%eax,1)
cmp    $0x20,%eax
je     104796 <_ftoa+0x186>
mov    %eax,%edx
not    %edx
add    %ecx,%edx
add    %edi,%edx
jne    104a70 <_ftoa+0x460>
movb   $0x2e,-0x38(%ebp,%eax,1)
lea    0x1(%eax),%ecx
jmp    1048f0 <_ftoa+0x2e0>
lea    0x0(%esi,%eiz,1),%esi
nop
test   $0x1,%bl
je     104746 <_ftoa+0x136>
jmp    10499a <_ftoa+0x38a>
xchg   %ax,%ax
movb   $0x2b,-0x38(%ebp,%ecx,1)
add    $0x1,%ecx
jmp    1047aa <_ftoa+0x19a>
fldl   0x106920(,%edi,8)
fxch   %st(1)
jmp    1046dc <_ftoa+0xcc>
lea    0x0(%esi,%eiz,1),%esi
nop
push   %ebp
mov    %esp,%ebp
mov    0xc(%ebp),%eax
mov    0x10(%ebp),%edx
test   %al,%al
je     104af0 <_out_fct+0x20>
mov    0x4(%edx),%ecx
movsbl %al,%eax
mov    %eax,0x8(%ebp)
mov    %ecx,0xc(%ebp)
pop    %ebp
mov    (%edx),%eax
jmp    *%eax
xchg   %ax,%ax
pop    %ebp
ret    
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
sub    $0x4c,%esp
mov    0xc(%ebp),%edi
mov    %eax,-0x20(%ebp)
test   %ecx,%ecx
mov    %edx,%eax
mov    $0x103c90,%edx
mov    %ecx,-0x28(%ebp)
cmovne %eax,%edx
movsbl (%edi),%eax
movl   $0x0,-0x1c(%ebp)
mov    %edx,-0x24(%ebp)
test   %al,%al
jne    104b6a <_vsnprintf+0x6a>
jmp    105191 <_vsnprintf+0x691>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
nop
mov    -0x1c(%ebp),%esi
sub    $0xc,%esp
pushl  0x8(%ebp)
push   %esi
lea    0x1(%esi),%ebx
pushl  -0x28(%ebp)
push   %eax
pushl  -0x20(%ebp)
mov    -0x24(%ebp),%eax
call   *%eax
mov    %ebx,-0x1c(%ebp)
add    $0x20,%esp
movsbl (%edi),%eax
test   %al,%al
je     104c60 <_vsnprintf+0x160>
add    $0x1,%edi
cmp    $0x25,%al
jne    104b40 <_vsnprintf+0x40>
xor    %ecx,%ecx
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi),%esi
movzbl (%edi),%ebx
lea    0x1(%edi),%edx
mov    %edx,%esi
lea    -0x20(%ebx),%eax
cmp    $0x10,%al
ja     104ba0 <_vsnprintf+0xa0>
movzbl %al,%eax
jmp    *0x106740(,%eax,4)
lea    0x0(%esi,%eiz,1),%esi
movsbl %bl,%eax
mov    %esi,%ebx
mov    %edx,-0x2c(%ebp)
lea    -0x30(%eax),%esi
mov    %esi,%edx
cmp    $0x9,%dl
jbe    104cf0 <_vsnprintf+0x1f0>
cmp    $0x2a,%al
je     104d30 <_vsnprintf+0x230>
movl   $0x0,-0x30(%ebp)
mov    %edi,%ebx
mov    -0x2c(%ebp),%edi
xor    %esi,%esi
cmp    $0x2e,%al
je     104c90 <_vsnprintf+0x190>
lea    -0x68(%eax),%edx
cmp    $0x12,%dl
ja     104bfa <_vsnprintf+0xfa>
movzbl %dl,%edx
jmp    *0x106784(,%edx,4)
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi),%esi
movsbl 0x1(%ebx),%eax
or     $0x1,%ch
add    $0x1,%edi
lea    -0x25(%eax),%edx
cmp    $0x53,%dl
ja     104d50 <_vsnprintf+0x250>
movzbl %dl,%edx
jmp    *0x1067d0(,%edx,4)
or     $0x1,%ecx
mov    %edx,%edi
jmp    104b80 <_vsnprintf+0x80>
lea    0x0(%esi),%esi
or     $0x2,%ecx
mov    %edx,%edi
jmp    104b80 <_vsnprintf+0x80>
lea    0x0(%esi),%esi
or     $0x4,%ecx
mov    %edx,%edi
jmp    104b80 <_vsnprintf+0x80>
lea    0x0(%esi),%esi
or     $0x10,%ecx
mov    %edx,%edi
jmp    104b80 <_vsnprintf+0x80>
lea    0x0(%esi),%esi
or     $0x8,%ecx
mov    %edx,%edi
jmp    104b80 <_vsnprintf+0x80>
lea    0x0(%esi),%esi
mov    -0x1c(%ebp),%ebx
mov    0x8(%ebp),%eax
mov    -0x1c(%ebp),%esi
sub    $0x1,%eax
cmp    0x8(%ebp),%esi
cmovb  %esi,%eax
sub    $0xc,%esp
pushl  0x8(%ebp)
push   %eax
mov    -0x24(%ebp),%eax
pushl  -0x28(%ebp)
push   $0x0
pushl  -0x20(%ebp)
call   *%eax
lea    -0xc(%ebp),%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret    
movsbl 0x1(%ebx),%eax
or     $0x4,%ch
lea    -0x30(%eax),%edx
cmp    $0x9,%dl
jbe    104cc0 <_vsnprintf+0x1c0>
cmp    $0x2a,%al
je     1050c0 <_vsnprintf+0x5c0>
mov    %edi,%ebx
add    $0x1,%edi
jmp    104bd4 <_vsnprintf+0xd4>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
nop
mov    %edi,%edx
lea    (%esi,%esi,4),%ebx
add    $0x1,%edi
lea    -0x30(%eax,%ebx,2),%esi
movsbl (%edi),%eax
lea    -0x30(%eax),%ebx
cmp    $0x9,%bl
jbe    104cc0 <_vsnprintf+0x1c0>
mov    %edi,%ebx
lea    0x2(%edx),%edi
jmp    104bd4 <_vsnprintf+0xd4>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
nop
xor    %esi,%esi
mov    %ecx,-0x34(%ebp)
mov    -0x2c(%ebp),%edx
mov    %esi,%ecx
jmp    104d03 <_vsnprintf+0x203>
lea    0x0(%esi,%eiz,1),%esi
add    $0x1,%edx
lea    (%ecx,%ecx,4),%ecx
mov    %edi,%esi
mov    %edx,%edi
lea    -0x30(%eax,%ecx,2),%ecx
movsbl (%edx),%eax
lea    -0x30(%eax),%ebx
cmp    $0x9,%bl
jbe    104d00 <_vsnprintf+0x200>
mov    %ecx,-0x30(%ebp)
mov    %edx,%ebx
mov    -0x34(%ebp),%ecx
lea    0x2(%esi),%edi
jmp    104bca <_vsnprintf+0xca>
lea    0x0(%esi,%eiz,1),%esi
mov    0x10(%ebp),%eax
lea    0x4(%eax),%edx
mov    (%eax),%eax
mov    %eax,-0x30(%ebp)
test   %eax,%eax
js     104d70 <_vsnprintf+0x270>
movsbl 0x1(%edi),%eax
mov    %edx,0x10(%ebp)
add    $0x2,%edi
jmp    104bca <_vsnprintf+0xca>
xchg   %ax,%ax
mov    -0x1c(%ebp),%ecx
sub    $0xc,%esp
pushl  0x8(%ebp)
lea    0x1(%ecx),%ebx
push   %ecx
jmp    104b4d <_vsnprintf+0x4d>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
neg    %eax
mov    %edx,0x10(%ebp)
or     $0x2,%ecx
add    $0x2,%edi
mov    %eax,-0x30(%ebp)
movsbl -0x1(%edi),%eax
jmp    104bca <_vsnprintf+0xca>
lea    0x0(%esi,%eiz,1),%esi
xchg   %ax,%ax
mov    %eax,%edx
and    $0xffffffdf,%edx
cmp    $0x58,%dl
je     1050f0 <_vsnprintf+0x5f0>
cmp    $0x6f,%al
je     1052f4 <_vsnprintf+0x7f4>
cmp    $0x62,%al
je     1053d9 <_vsnprintf+0x8d9>
movl   $0xa,-0x2c(%ebp)
and    $0xffffffef,%ecx
cmp    $0x69,%al
je     104dc4 <_vsnprintf+0x2c4>
cmp    $0x64,%al
jne    105102 <_vsnprintf+0x602>
mov    %ecx,%edx
and    $0xfffffffe,%edx
test   $0x4,%ch
cmovne %edx,%ecx
mov    %ecx,%edx
and    $0x200,%edx
cmp    $0x69,%al
je     105120 <_vsnprintf+0x620>
cmp    $0x64,%al
je     105120 <_vsnprintf+0x620>
mov    0x10(%ebp),%eax
test   %edx,%edx
jne    105382 <_vsnprintf+0x882>
lea    0x4(%eax),%ebx
test   $0x1,%ch
jne    1053cc <_vsnprintf+0x8cc>
mov    0x10(%ebp),%eax
test   $0x40,%cl
jne    1052e4 <_vsnprintf+0x7e4>
test   $0x80,%cl
je     1053e5 <_vsnprintf+0x8e5>
movzwl (%eax),%eax
push   %ecx
pushl  -0x30(%ebp)
push   %esi
pushl  -0x2c(%ebp)
push   $0x0
push   %eax
jmp    105011 <_vsnprintf+0x511>
movsbl 0x1(%ebx),%eax
cmp    $0x6c,%al
je     105177 <_vsnprintf+0x677>
or     $0x1,%ch
add    $0x1,%edi
jmp    104bfa <_vsnprintf+0xfa>
movsbl 0x1(%ebx),%eax
or     $0x2,%ch
add    $0x1,%edi
jmp    104bfa <_vsnprintf+0xfa>
movsbl 0x1(%ebx),%eax
cmp    $0x68,%al
je     105168 <_vsnprintf+0x668>
or     $0x80,%cl
add    $0x1,%edi
jmp    104bfa <_vsnprintf+0xfa>
mov    %eax,%ebx
mov    %ecx,%edx
and    $0xffffffdf,%ebx
or     $0x8,%dh
cmp    $0x47,%bl
cmove  %edx,%ecx
and    $0xfffffffd,%eax
mov    %ecx,%edx
or     $0x20,%edx
cmp    $0x45,%al
mov    0x10(%ebp),%eax
cmove  %edx,%ecx
sub    $0x4,%esp
mov    -0x24(%ebp),%edx
lea    0x8(%eax),%ebx
push   %ecx
mov    -0x28(%ebp),%ecx
pushl  -0x30(%ebp)
push   %esi
pushl  0x4(%eax)
pushl  (%eax)
mov    -0x20(%ebp),%eax
pushl  0x8(%ebp)
pushl  -0x1c(%ebp)
call   104230 <_etoa>
mov    %ebx,0x10(%ebp)
add    $0x20,%esp
mov    %eax,-0x1c(%ebp)
jmp    104b5f <_vsnprintf+0x5f>
mov    %ecx,%edx
or     $0x20,%edx
cmp    $0x46,%al
mov    0x10(%ebp),%eax
cmove  %edx,%ecx
sub    $0x4,%esp
mov    -0x24(%ebp),%edx
lea    0x8(%eax),%ebx
push   %ecx
mov    -0x28(%ebp),%ecx
pushl  -0x30(%ebp)
push   %esi
pushl  0x4(%eax)
pushl  (%eax)
mov    -0x20(%ebp),%eax
pushl  0x8(%ebp)
pushl  -0x1c(%ebp)
call   104610 <_ftoa>
mov    %ebx,0x10(%ebp)
add    $0x20,%esp
mov    %eax,-0x1c(%ebp)
jmp    104b5f <_vsnprintf+0x5f>
mov    0x10(%ebp),%eax
add    $0x4,%eax
mov    %eax,-0x3c(%ebp)
mov    0x10(%ebp),%eax
mov    (%eax),%eax
mov    %eax,-0x34(%ebp)
movsbl (%eax),%eax
test   %esi,%esi
jne    105110 <_vsnprintf+0x610>
mov    $0xfffffffe,%edx
test   %al,%al
je     1053ec <_vsnprintf+0x8ec>
mov    -0x34(%ebp),%ebx
lea    0x1(%ebx,%edx,1),%ebx
mov    -0x34(%ebp),%edx
jmp    104f38 <_vsnprintf+0x438>
lea    0x0(%esi,%eiz,1),%esi
cmp    %edx,%ebx
je     105186 <_vsnprintf+0x686>
add    $0x1,%edx
cmpb   $0x0,(%edx)
jne    104f30 <_vsnprintf+0x430>
sub    -0x34(%ebp),%edx
mov    %edx,-0x38(%ebp)
mov    %ecx,%ebx
and    $0x400,%ebx
mov    %ebx,-0x2c(%ebp)
je     104f5e <_vsnprintf+0x45e>
mov    -0x38(%ebp),%ebx
cmp    %esi,%ebx
cmova  %esi,%ebx
mov    %ebx,-0x38(%ebp)
and    $0x2,%ecx
mov    %ecx,-0x40(%ebp)
je     1051f8 <_vsnprintf+0x6f8>
test   %al,%al
je     1051a7 <_vsnprintf+0x6a7>
mov    -0x1c(%ebp),%edx
mov    -0x34(%ebp),%ecx
mov    %edi,0xc(%ebp)
sub    %edx,%ecx
mov    %edx,%edi
mov    %ecx,-0x1c(%ebp)
jmp    104f92 <_vsnprintf+0x492>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
nop
mov    %ebx,%edi
mov    -0x2c(%ebp),%edx
test   %edx,%edx
je     104fa6 <_vsnprintf+0x4a6>
lea    -0x1(%esi),%ecx
test   %esi,%esi
je     105198 <_vsnprintf+0x698>
mov    %ecx,%esi
sub    $0xc,%esp
pushl  0x8(%ebp)
lea    0x1(%edi),%ebx
push   %edi
pushl  -0x28(%ebp)
push   %eax
mov    -0x24(%ebp),%eax
pushl  -0x20(%ebp)
call   *%eax
mov    -0x1c(%ebp),%eax
movsbl 0x1(%edi,%eax,1),%eax
add    $0x20,%esp
test   %al,%al
jne    104f90 <_vsnprintf+0x490>
mov    0xc(%ebp),%edi
mov    -0x40(%ebp),%eax
test   %eax,%eax
jne    1051a4 <_vsnprintf+0x6a4>
mov    -0x3c(%ebp),%eax
mov    %ebx,-0x1c(%ebp)
mov    %eax,0x10(%ebp)
jmp    104b5f <_vsnprintf+0x5f>
mov    -0x1c(%ebp),%eax
sub    $0xc,%esp
pushl  0x8(%ebp)
lea    0x1(%eax),%ebx
push   %eax
pushl  -0x28(%ebp)
push   $0x25
jmp    104b51 <_vsnprintf+0x51>
or     $0x21,%ecx
mov    0x10(%ebp),%eax
push   %ecx
push   $0x8
lea    0x4(%eax),%ebx
push   %esi
push   $0x10
push   $0x0
pushl  (%eax)
mov    -0x28(%ebp),%ecx
pushl  0x8(%ebp)
mov    -0x24(%ebp),%edx
pushl  -0x1c(%ebp)
mov    -0x20(%ebp),%eax
call   104060 <_ntoa_long>
mov    %ebx,0x10(%ebp)
add    $0x20,%esp
mov    %eax,-0x1c(%ebp)
jmp    104b5f <_vsnprintf+0x5f>
mov    0x10(%ebp),%eax
add    $0x4,%eax
and    $0x2,%ecx
mov    %eax,-0x2c(%ebp)
mov    -0x1c(%ebp),%eax
lea    0x1(%eax),%esi
mov    %esi,%ebx
je     105266 <_vsnprintf+0x766>
mov    0x10(%ebp),%ecx
sub    $0xc,%esp
pushl  0x8(%ebp)
pushl  -0x1c(%ebp)
movsbl (%ecx),%eax
pushl  -0x28(%ebp)
mov    -0x24(%ebp),%ecx
push   %eax
pushl  -0x20(%ebp)
call   *%ecx
mov    -0x30(%ebp),%ecx
add    %ecx,-0x1c(%ebp)
add    $0x20,%esp
cmp    $0x1,%ecx
jbe    1052ec <_vsnprintf+0x7ec>
mov    %edi,0xc(%ebp)
mov    -0x24(%ebp),%esi
mov    -0x28(%ebp),%edi
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi),%esi
sub    $0xc,%esp
mov    %ebx,%edx
pushl  0x8(%ebp)
add    $0x1,%ebx
push   %edx
push   %edi
push   $0x20
pushl  -0x20(%ebp)
call   *%esi
add    $0x20,%esp
cmp    -0x1c(%ebp),%ebx
jne    105090 <_vsnprintf+0x590>
mov    0xc(%ebp),%edi
mov    -0x2c(%ebp),%eax
mov    %eax,0x10(%ebp)
jmp    104b5f <_vsnprintf+0x5f>
lea    0x0(%esi),%esi
mov    0x10(%ebp),%eax
mov    0x10(%ebp),%edx
lea    0x3(%ebx),%edi
mov    (%eax),%esi
test   %esi,%esi
mov    $0x0,%esi
cmovns (%eax),%esi
add    $0x4,%edx
movsbl 0x2(%ebx),%eax
mov    %edx,0x10(%ebp)
add    $0x2,%ebx
jmp    104bd4 <_vsnprintf+0xd4>
lea    0x0(%esi,%eiz,1),%esi
xchg   %ax,%ax
cmp    $0x58,%al
jne    1053c0 <_vsnprintf+0x8c0>
movl   $0x10,-0x2c(%ebp)
or     $0x20,%ecx
and    $0xfffffff3,%ecx
jmp    104dc4 <_vsnprintf+0x2c4>
lea    0x0(%esi),%esi
test   %al,%al
je     1053ec <_vsnprintf+0x8ec>
lea    -0x1(%esi),%edx
jmp    104f1d <_vsnprintf+0x41d>
mov    0x10(%ebp),%eax
test   %edx,%edx
jne    105307 <_vsnprintf+0x807>
lea    0x4(%eax),%ebx
test   $0x1,%ch
jne    105300 <_vsnprintf+0x800>
mov    0x10(%ebp),%eax
test   $0x40,%cl
jne    1052dc <_vsnprintf+0x7dc>
test   $0x80,%cl
je     105300 <_vsnprintf+0x800>
movswl (%eax),%eax
mov    %eax,%edx
push   %ecx
shr    $0x1f,%edx
pushl  -0x30(%ebp)
push   %esi
pushl  -0x2c(%ebp)
push   %edx
cltd   
xor    %edx,%eax
sub    %edx,%eax
push   %eax
jmp    105011 <_vsnprintf+0x511>
movsbl 0x2(%ebx),%eax
or     $0xc0,%cl
lea    0x3(%ebx),%edi
jmp    104bfa <_vsnprintf+0xfa>
movsbl 0x2(%ebx),%eax
or     $0x3,%ch
lea    0x3(%ebx),%edi
jmp    104bfa <_vsnprintf+0xfa>
sub    -0x34(%ebp),%ebx
mov    %ebx,-0x38(%ebp)
jmp    104f46 <_vsnprintf+0x446>
xor    %ebx,%ebx
jmp    104c63 <_vsnprintf+0x163>
mov    %edi,%edx
mov    0xc(%ebp),%edi
mov    %edx,%ebx
jmp    104fce <_vsnprintf+0x4ce>
mov    %ebx,-0x1c(%ebp)
mov    -0x30(%ebp),%eax
mov    -0x38(%ebp),%ecx
cmp    %ecx,%eax
jbe    10525e <_vsnprintf+0x75e>
mov    -0x1c(%ebp),%edx
mov    %edi,0xc(%ebp)
mov    0x8(%ebp),%edi
add    %edx,%eax
mov    %eax,%ebx
sub    %ecx,%ebx
mov    %ebx,%esi
mov    %edx,%ebx
lea    0x0(%esi,%eiz,1),%esi
nop
sub    $0xc,%esp
mov    %ebx,%edx
add    $0x1,%ebx
mov    -0x24(%ebp),%eax
push   %edi
push   %edx
pushl  -0x28(%ebp)
push   $0x20
pushl  -0x20(%ebp)
call   *%eax
add    $0x20,%esp
cmp    %esi,%ebx
jne    1051d0 <_vsnprintf+0x6d0>
mov    0xc(%ebp),%edi
mov    %esi,%ebx
jmp    104fd9 <_vsnprintf+0x4d9>
mov    -0x38(%ebp),%ecx
mov    -0x30(%ebp),%ebx
lea    0x1(%ecx),%edx
cmp    %ecx,%ebx
jbe    1053f8 <_vsnprintf+0x8f8>
mov    -0x1c(%ebp),%eax
mov    %edi,0xc(%ebp)
mov    0x8(%ebp),%edi
mov    %esi,-0x38(%ebp)
add    %eax,%ebx
sub    %ecx,%ebx
mov    %ebx,%esi
mov    %eax,%ebx
lea    0x0(%esi),%esi
sub    $0xc,%esp
mov    %ebx,%edx
add    $0x1,%ebx
mov    -0x24(%ebp),%eax
push   %edi
push   %edx
pushl  -0x28(%ebp)
push   $0x20
pushl  -0x20(%ebp)
call   *%eax
add    $0x20,%esp
cmp    %ebx,%esi
jne    105220 <_vsnprintf+0x720>
mov    -0x30(%ebp),%eax
mov    -0x38(%ebp),%esi
mov    %ebx,-0x1c(%ebp)
mov    0xc(%ebp),%edi
add    $0x1,%eax
mov    %eax,-0x38(%ebp)
mov    -0x34(%ebp),%eax
movsbl (%eax),%eax
test   %al,%al
jne    104f72 <_vsnprintf+0x472>
mov    -0x1c(%ebp),%ebx
jmp    104fd9 <_vsnprintf+0x4d9>
mov    -0x30(%ebp),%eax
cmp    $0x1,%eax
jbe    105400 <_vsnprintf+0x900>
mov    -0x1c(%ebp),%ecx
mov    %edi,0xc(%ebp)
mov    %esi,%edi
lea    -0x1(%ecx,%eax,1),%ebx
mov    %ecx,%esi
jmp    105293 <_vsnprintf+0x793>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
add    $0x1,%edi
sub    $0xc,%esp
mov    %esi,%ecx
pushl  0x8(%ebp)
mov    -0x24(%ebp),%eax
push   %ecx
mov    %edi,%esi
pushl  -0x28(%ebp)
push   $0x20
pushl  -0x20(%ebp)
call   *%eax
add    $0x20,%esp
cmp    %ebx,%edi
jne    105290 <_vsnprintf+0x790>
add    $0x1,%esi
mov    0xc(%ebp),%edi
mov    %esi,-0x1c(%ebp)
mov    0x10(%ebp),%eax
sub    $0xc,%esp
pushl  0x8(%ebp)
push   %ebx
movsbl (%eax),%eax
pushl  -0x28(%ebp)
push   %eax
mov    -0x24(%ebp),%eax
pushl  -0x20(%ebp)
call   *%eax
add    $0x20,%esp
jmp    1050af <_vsnprintf+0x5af>
movsbl (%eax),%eax
jmp    10514f <_vsnprintf+0x64f>
movzbl (%eax),%eax
jmp    104e16 <_vsnprintf+0x316>
mov    %esi,-0x1c(%ebp)
jmp    1050af <_vsnprintf+0x5af>
movl   $0x8,-0x2c(%ebp)
jmp    105102 <_vsnprintf+0x602>
mov    (%eax),%eax
jmp    10514f <_vsnprintf+0x64f>
mov    0x10(%ebp),%ebx
add    $0x8,%eax
sub    $0x8,%esp
xor    %edx,%edx
mov    %eax,-0x34(%ebp)
mov    (%ebx),%eax
mov    0x4(%ebx),%ebx
push   %ecx
pushl  -0x30(%ebp)
mov    %eax,-0x38(%ebp)
mov    -0x2c(%ebp),%eax
mov    -0x38(%ebp),%ecx
push   %esi
mov    %ebx,%esi
push   %edx
sar    $0x1f,%esi
push   %eax
mov    %ebx,%eax
shr    $0x1f,%eax
mov    %esi,-0x48(%ebp)
push   %eax
mov    -0x48(%ebp),%eax
mov    %esi,-0x44(%ebp)
mov    -0x44(%ebp),%edx
mov    %ebx,%esi
xor    %eax,%ecx
mov    %ecx,-0x50(%ebp)
xor    %edx,%esi
mov    %eax,%ecx
mov    -0x50(%ebp),%eax
mov    %esi,-0x4c(%ebp)
mov    %edx,%ebx
mov    -0x4c(%ebp),%edx
sub    %ecx,%eax
mov    -0x28(%ebp),%ecx
sbb    %ebx,%edx
push   %edx
mov    -0x24(%ebp),%edx
push   %eax
mov    -0x20(%ebp),%eax
pushl  0x8(%ebp)
pushl  -0x1c(%ebp)
call   104130 <_ntoa_long_long>
add    $0x30,%esp
mov    %eax,-0x1c(%ebp)
mov    -0x34(%ebp),%eax
mov    %eax,0x10(%ebp)
jmp    104b5f <_vsnprintf+0x5f>
lea    0x8(%eax),%ebx
mov    -0x2c(%ebp),%eax
sub    $0x8,%esp
xor    %edx,%edx
push   %ecx
mov    -0x28(%ebp),%ecx
pushl  -0x30(%ebp)
push   %esi
push   %edx
mov    -0x24(%ebp),%edx
push   %eax
mov    0x10(%ebp),%eax
push   $0x0
pushl  0x4(%eax)
pushl  (%eax)
mov    -0x20(%ebp),%eax
pushl  0x8(%ebp)
pushl  -0x1c(%ebp)
call   104130 <_ntoa_long_long>
mov    %ebx,0x10(%ebp)
add    $0x30,%esp
mov    %eax,-0x1c(%ebp)
jmp    104b5f <_vsnprintf+0x5f>
movl   $0x10,-0x2c(%ebp)
jmp    104db8 <_vsnprintf+0x2b8>
push   %ecx
pushl  -0x30(%ebp)
push   %esi
pushl  -0x2c(%ebp)
jmp    10500d <_vsnprintf+0x50d>
movl   $0x2,-0x2c(%ebp)
jmp    105102 <_vsnprintf+0x602>
mov    (%eax),%eax
jmp    104e16 <_vsnprintf+0x316>
movl   $0x0,-0x38(%ebp)
jmp    104f46 <_vsnprintf+0x446>
mov    %edx,-0x38(%ebp)
jmp    105256 <_vsnprintf+0x756>
mov    -0x1c(%ebp),%ebx
mov    %esi,-0x1c(%ebp)
jmp    1052bb <_vsnprintf+0x7bb>
lea    0x0(%esi,%eiz,1),%esi
nop
push   %ebp
mov    $0x103ca0,%edx
mov    %esp,%ebp
sub    $0x1c,%esp
lea    0x10(%ebp),%eax
lea    -0x9(%ebp),%ecx
push   %eax
mov    0x8(%ebp),%eax
pushl  0xc(%ebp)
push   $0xffffffff
call   104b00 <_vsnprintf>
leave  
ret    
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
nop
push   %ebp
mov    $0x103c70,%edx
mov    %esp,%ebp
sub    $0xc,%esp
lea    0x14(%ebp),%eax
mov    0xc(%ebp),%ecx
push   %eax
mov    0x8(%ebp),%eax
pushl  0x10(%ebp)
push   $0xffffffff
call   104b00 <_vsnprintf>
leave  
ret    
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
nop
push   %ebp
mov    $0x103c70,%edx
mov    %esp,%ebp
sub    $0xc,%esp
lea    0x18(%ebp),%eax
mov    0xc(%ebp),%ecx
push   %eax
mov    0x8(%ebp),%eax
pushl  0x14(%ebp)
pushl  0x10(%ebp)
call   104b00 <_vsnprintf>
leave  
ret    
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
mov    $0x103ca0,%edx
mov    %esp,%ebp
sub    $0x1c,%esp
pushl  0x10(%ebp)
mov    0x8(%ebp),%eax
lea    -0x9(%ebp),%ecx
pushl  0xc(%ebp)
push   $0xffffffff
call   104b00 <_vsnprintf>
leave  
ret    
push   %ebp
mov    %esp,%ebp
push   %ebx
mov    0x18(%ebp),%ebx
mov    0x10(%ebp),%edx
mov    0x8(%ebp),%eax
mov    0xc(%ebp),%ecx
mov    %ebx,0x10(%ebp)
mov    0x14(%ebp),%ebx
mov    %edx,0x8(%ebp)
mov    $0x103c70,%edx
mov    %ebx,0xc(%ebp)
mov    -0x4(%ebp),%ebx
leave  
jmp    104b00 <_vsnprintf>
lea    0x0(%esi),%esi
push   %ebp
mov    %esp,%ebp
sub    $0x1c,%esp
mov    0xc(%ebp),%edx
lea    0x18(%ebp),%eax
lea    -0x10(%ebp),%ecx
push   %eax
mov    0x8(%ebp),%eax
mov    %edx,-0x10(%ebp)
mov    0x10(%ebp),%edx
pushl  0x14(%ebp)
push   $0xffffffff
mov    %edx,-0xc(%ebp)
mov    $0x104ad0,%edx
call   104b00 <_vsnprintf>
leave  
ret    
xchg   %ax,%ax
nop
push   %ebp
mov    %esp,%ebp
sub    $0x20,%esp
mov    0x8(%ebp),%eax
push   $0x1
mov    %al,-0x9(%ebp)
lea    -0x9(%ebp),%eax
push   %eax
call   105560 <write>
add    $0x10,%esp
leave  
ret    
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
mov    %esp,%ebp
push   %ebx
mov    0x8(%ebp),%eax
mov    0x10(%ebp),%ecx
mov    0x14(%ebp),%edx
mov    0xc(%ebp),%ebx
int    $0x80
mov    -0x4(%ebp),%ebx
leave  
ret    
lea    0x0(%esi,%eiz,1),%esi
xchg   %ax,%ax
push   %ebp
mov    $0x4,%eax
mov    %esp,%ebp
push   %ebx
mov    $0x1,%ebx
mov    0x8(%ebp),%ecx
mov    0xc(%ebp),%edx
int    $0x80
mov    -0x4(%ebp),%ebx
leave  
ret    
lea    0x0(%esi,%eiz,1),%esi
nop
push   %ebp
xor    %eax,%eax
mov    %esp,%ebp
push   %ebx
mov    %eax,%ebx
mov    0x8(%ebp),%ecx
mov    0xc(%ebp),%edx
int    $0x80
mov    -0x4(%ebp),%ebx
leave  
ret    
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
xor    %edx,%edx
mov    $0x3b,%eax
mov    %edx,%ecx
mov    %esp,%ebp
push   %ebx
mov    0x8(%ebp),%ebx
int    $0x80
mov    -0x4(%ebp),%ebx
leave  
ret    
lea    0x0(%esi,%eiz,1),%esi
xchg   %ax,%ax
push   %ebp
xor    %edx,%edx
mov    $0x17,%eax
mov    %edx,%ecx
mov    %esp,%ebp
push   %ebx
mov    %edx,%ebx
int    $0x80
mov    -0x4(%ebp),%ebx
leave  
ret    
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi),%esi
push   %ebp
xor    %edx,%edx
mov    $0x37,%eax
mov    %edx,%ecx
mov    %esp,%ebp
push   %ebx
movzbl 0x8(%ebp),%ebx
int    $0x80
jmp    1055f3 <exit+0x13>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
mov    %esp,%ebp
push   %ebx
mov    0x10(%ebp),%ecx
test   %ecx,%ecx
je     105640 <memcmp+0x40>
mov    0x8(%ebp),%eax
mov    0xc(%ebp),%edx
add    %eax,%ecx
jmp    10562c <memcmp+0x2c>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
ja     105650 <memcmp+0x50>
add    $0x1,%eax
add    $0x1,%edx
cmp    %ecx,%eax
je     105640 <memcmp+0x40>
movzbl (%edx),%ebx
cmp    %bl,(%eax)
jae    105620 <memcmp+0x20>
mov    -0x4(%ebp),%ebx
mov    $0xffffffff,%eax
leave  
ret    
lea    0x0(%esi),%esi
mov    -0x4(%ebp),%ebx
xor    %eax,%eax
leave  
ret    
lea    0x0(%esi,%eiz,1),%esi
xchg   %ax,%ax
mov    -0x4(%ebp),%ebx
mov    $0x1,%eax
leave  
ret    
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
mov    %esp,%ebp
push   %esi
push   %ebx
mov    0x10(%ebp),%ebx
mov    0x8(%ebp),%esi
test   %ebx,%ebx
je     105690 <memcpy+0x30>
mov    0xc(%ebp),%eax
mov    %esi,%edx
add    %eax,%ebx
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi),%esi
movzbl (%eax),%ecx
add    $0x1,%eax
add    $0x1,%edx
mov    %cl,-0x1(%edx)
cmp    %ebx,%eax
jne    105680 <memcpy+0x20>
mov    %esi,%eax
pop    %ebx
pop    %esi
pop    %ebp
ret    
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
mov    %esp,%ebp
push   %esi
mov    0xc(%ebp),%edx
mov    0x10(%ebp),%eax
push   %ebx
mov    0x8(%ebp),%ebx
cmp    %edx,%ebx
jb     1056e0 <memmove+0x40>
test   %eax,%eax
je     1056cc <memmove+0x2c>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi),%esi
sub    $0x1,%eax
movzbl (%edx,%eax,1),%ecx
mov    %cl,(%ebx,%eax,1)
jne    1056c0 <memmove+0x20>
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %ebp
ret    
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
test   %eax,%eax
je     1056cc <memmove+0x2c>
mov    %ebx,%esi
add    %edx,%eax
lea    0x0(%esi,%eiz,1),%esi
nop
movzbl (%edx),%ecx
add    $0x1,%edx
add    $0x1,%esi
mov    %cl,-0x1(%esi)
cmp    %eax,%edx
jne    1056f0 <memmove+0x50>
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %ebp
ret    
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
mov    %esp,%ebp
push   %esi
mov    0x10(%ebp),%esi
movzbl 0xc(%ebp),%ecx
push   %ebx
mov    0x8(%ebp),%ebx
lea    (%ebx,%esi,1),%edx
test   %esi,%esi
je     105739 <memset+0x29>
mov    %ebx,%eax
lea    0x0(%esi,%eiz,1),%esi
nop
mov    %cl,(%eax)
add    $0x1,%eax
cmp    %edx,%eax
jne    105730 <memset+0x20>
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %ebp
ret    
nop
push   %ebp
xor    %eax,%eax
mov    %esp,%ebp
mov    0x8(%ebp),%edx
cmpb   $0x0,(%edx)
je     105759 <strlen+0x19>
lea    0x0(%esi),%esi
add    $0x1,%eax
cmpb   $0x0,(%edx,%eax,1)
jne    105750 <strlen+0x10>
pop    %ebp
ret    
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
sub    $0x18,%esp
mov    0x8(%ebp),%ebx
mov    0xc(%ebp),%esi
push   %ebx
call   105740 <strlen>
mov    %esi,(%esp)
mov    %eax,%edi
call   105740 <strlen>
add    $0x10,%esp
mov    %eax,%ecx
mov    $0xffffffff,%eax
cmp    %edi,%ecx
jne    1057b8 <strcmp+0x58>
test   %ecx,%ecx
je     1057c0 <strcmp+0x60>
mov    %ebx,%eax
mov    %esi,%edx
add    %ebx,%ecx
jmp    1057ac <strcmp+0x4c>
lea    0x0(%esi,%eiz,1),%esi
ja     1057d0 <strcmp+0x70>
add    $0x1,%eax
add    $0x1,%edx
cmp    %ecx,%eax
je     1057c0 <strcmp+0x60>
movzbl (%edx),%ebx
cmp    %bl,(%eax)
jae    1057a0 <strcmp+0x40>
mov    $0xffffffff,%eax
lea    -0xc(%ebp),%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret    
lea    -0xc(%ebp),%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret    
lea    0x0(%esi),%esi
lea    -0xc(%ebp),%esp
mov    $0x1,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret    
xchg   %ax,%ax
nop
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
sub    $0x2c,%esp
mov    0x8(%ebp),%ecx
mov    0xc(%ebp),%ebx
mov    0x10(%ebp),%eax
mov    0x14(%ebp),%esi
mov    %ecx,-0x20(%ebp)
mov    %ebx,%edx
mov    %eax,-0x24(%ebp)
test   %esi,%esi
jne    105840 <__udivmoddi4+0x60>
mov    %eax,%esi
cmp    %ebx,%eax
jbe    1058b0 <__udivmoddi4+0xd0>
mov    %ecx,%eax
xor    %edi,%edi
div    %esi
mov    %eax,%ecx
mov    0x18(%ebp),%eax
mov    %ecx,-0x1c(%ebp)
test   %eax,%eax
je     105829 <__udivmoddi4+0x49>
mov    0x18(%ebp),%ebx
mov    %edx,(%ebx)
movl   $0x0,0x4(%ebx)
mov    -0x1c(%ebp),%eax
mov    %edi,%edx
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret    
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi),%esi
cmp    %ebx,%esi
jbe    105870 <__udivmoddi4+0x90>
mov    0x18(%ebp),%esi
test   %esi,%esi
je     105990 <__udivmoddi4+0x1b0>
mov    0x18(%ebp),%eax
mov    -0x20(%ebp),%edi
movl   $0x0,-0x1c(%ebp)
mov    %edi,(%eax)
xor    %edi,%edi
mov    %ebx,0x4(%eax)
mov    -0x1c(%ebp),%eax
mov    %edi,%edx
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret    
bsr    %esi,%edi
xor    $0x1f,%edi
jne    1058e0 <__udivmoddi4+0x100>
cmp    %ebx,%esi
jb     1059a0 <__udivmoddi4+0x1c0>
movl   $0x0,-0x1c(%ebp)
mov    -0x20(%ebp),%eax
cmp    %eax,-0x24(%ebp)
jbe    1059a0 <__udivmoddi4+0x1c0>
mov    0x18(%ebp),%ebx
test   %ebx,%ebx
je     105829 <__udivmoddi4+0x49>
mov    0x18(%ebp),%eax
mov    %ecx,(%eax)
mov    %edx,0x4(%eax)
jmp    105829 <__udivmoddi4+0x49>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
nop
mov    %eax,%edi
test   %eax,%eax
jne    1058c1 <__udivmoddi4+0xe1>
mov    $0x1,%eax
xor    %edx,%edx
div    %esi
mov    %eax,%edi
mov    %ebx,%eax
xor    %edx,%edx
div    %edi
mov    %eax,%ebx
mov    -0x20(%ebp),%eax
div    %edi
mov    %ebx,%edi
mov    %eax,%ecx
jmp    105813 <__udivmoddi4+0x33>
lea    0x0(%esi,%eiz,1),%esi
xchg   %ax,%ax
mov    $0x20,%eax
mov    %edi,%ecx
mov    %eax,%edx
mov    -0x24(%ebp),%eax
shl    %cl,%esi
sub    %edi,%edx
mov    %edx,%ecx
mov    %edx,-0x30(%ebp)
shr    %cl,%eax
mov    %eax,%ecx
mov    -0x24(%ebp),%eax
or     %esi,%ecx
mov    %edx,%esi
mov    %ecx,-0x1c(%ebp)
mov    %edi,%ecx
shl    %cl,%eax
mov    %edx,%ecx
mov    -0x20(%ebp),%edx
mov    %eax,-0x24(%ebp)
mov    %ebx,%eax
shr    %cl,%eax
mov    %edi,%ecx
shl    %cl,%ebx
mov    %esi,%ecx
mov    -0x20(%ebp),%esi
shr    %cl,%edx
mov    %edi,%ecx
shl    %cl,%esi
or     %edx,%ebx
mov    %esi,-0x2c(%ebp)
mov    %eax,%esi
mov    %ebx,%eax
mov    %esi,%edx
divl   -0x1c(%ebp)
mov    %edx,%esi
mov    %eax,%ecx
mov    %eax,%ebx
mull   -0x24(%ebp)
mov    %eax,-0x20(%ebp)
mov    %edx,-0x28(%ebp)
cmp    %edx,%esi
jb     10594a <__udivmoddi4+0x16a>
jne    105959 <__udivmoddi4+0x179>
cmp    %eax,-0x2c(%ebp)
jae    105959 <__udivmoddi4+0x179>
sub    -0x24(%ebp),%eax
sbb    -0x1c(%ebp),%edx
mov    %edx,-0x28(%ebp)
lea    -0x1(%ecx),%ebx
mov    %eax,-0x20(%ebp)
mov    0x18(%ebp),%eax
mov    %ebx,-0x1c(%ebp)
test   %eax,%eax
je     1059c0 <__udivmoddi4+0x1e0>
movzbl -0x30(%ebp),%ecx
mov    -0x2c(%ebp),%edx
sub    -0x20(%ebp),%edx
sbb    -0x28(%ebp),%esi
mov    %esi,%ebx
mov    0x18(%ebp),%eax
shl    %cl,%ebx
mov    %edi,%ecx
xor    %edi,%edi
shr    %cl,%edx
shr    %cl,%esi
or     %edx,%ebx
mov    %esi,0x4(%eax)
mov    %ebx,(%eax)
jmp    105829 <__udivmoddi4+0x49>
lea    0x0(%esi,%eiz,1),%esi
nop
movl   $0x0,-0x1c(%ebp)
xor    %edi,%edi
jmp    105829 <__udivmoddi4+0x49>
xchg   %ax,%ax
mov    -0x20(%ebp),%eax
mov    %ebx,%edx
movl   $0x1,-0x1c(%ebp)
sub    -0x24(%ebp),%eax
sbb    %esi,%edx
mov    %eax,%ecx
jmp    105893 <__udivmoddi4+0xb3>
lea    0x0(%esi,%eiz,1),%esi
nop
xor    %edi,%edi
jmp    105829 <__udivmoddi4+0x49>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
mov    0x109008,%eax
cmp    $0xffffffff,%eax
je     105a10 <__do_global_ctors_aux+0x40>
push   %ebp
mov    %esp,%ebp
push   %ebx
mov    $0x109008,%ebx
sub    $0x4,%esp
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi),%esi
call   *%eax
mov    -0x4(%ebx),%eax
sub    $0x4,%ebx
cmp    $0xffffffff,%eax
jne    1059f0 <__do_global_ctors_aux+0x20>
mov    -0x4(%ebp),%ebx
leave  
ret    
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%esi,%eiz,1),%esi
ret    
push   %ebp
mov    %esp,%ebp
call   100120 <frame_dummy>
call   1059d0 <__do_global_ctors_aux>
pop    %ebp
ret    
push   %ebp
mov    %esp,%ebp
call   1000a0 <__do_global_dtors_aux>
pop    %ebp
ret    
lgdtl  0x10e020
mov    $0x10,%ax
mov    %eax,%ds
mov    %eax,%es
mov    %eax,%fs
mov    %eax,%gs
mov    %eax,%ss
ljmp   $0x8,$0x105a46
ret    
ret    
movw   $0x3f,0x10e020
movl   $0x10e040,0x10e022
movl   $0x0,0x10e040
movl   $0x0,0x10e044
movl   $0xffff,0x10e048
movl   $0xcf9a00,0x10e04c
movl   $0xffff,0x10e050
movl   $0xcf9200,0x10e054
movl   $0xffff,0x10e058
movl   $0xcffa00,0x10e05c
movl   $0xffff,0x10e060
movl   $0xcff200,0x10e064
jmp    105a2a <_ZN3GDT5flushEv>
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
sub    $0x18,%esp
mov    0x8(%ebp),%ebx
mov    0xc(%ebp),%edi
mov    0x10(%ebp),%esi
push   %edi
push   %esi
push   %ebx
push   $0x1082d6
push   $0x103bc0
call   105410 <printf_>
add    $0x14,%esp
push   %edi
push   %esi
push   %ebx
push   $0x1082d6
push   $0x105520
call   105410 <printf_>
add    $0x20,%esp
jmp    105b0c <_Z16__assertion_failPKcjS0_+0x3c>
